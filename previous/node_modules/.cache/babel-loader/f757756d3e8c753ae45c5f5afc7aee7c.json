{"ast":null,"code":"import { useState, useRef, useEffect } from 'react';\nimport { getLockStyles } from './utils/get-lock-styles.js';\nimport { injectStyles } from './utils/inject-style-tag.js';\nimport { insertStyleTag } from './utils/insert-style-tag.js';\nimport { makeStyleTag } from './utils/make-style-tag.js';\n\nfunction useScrollLock(lock) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    disableBodyPadding: false\n  };\n  const [scrollLocked, setScrollLocked] = useState(lock || false);\n  const scrollTop = useRef(0);\n  const {\n    disableBodyPadding\n  } = options;\n  const stylesheet = useRef(null);\n\n  const lockScroll = () => {\n    scrollTop.current = window.scrollY;\n    const styles = getLockStyles({\n      disableBodyPadding\n    });\n    const sheet = makeStyleTag();\n    injectStyles(sheet, styles);\n    insertStyleTag(sheet);\n    stylesheet.current = sheet;\n  };\n\n  const unlockScroll = () => {\n    if (!(stylesheet == null ? void 0 : stylesheet.current)) return;\n    stylesheet.current.parentNode.removeChild(stylesheet.current);\n    stylesheet.current = null;\n  };\n\n  useEffect(() => {\n    if (scrollLocked) {\n      lockScroll();\n    } else {\n      unlockScroll();\n    }\n\n    return unlockScroll;\n  }, [scrollLocked]);\n  useEffect(() => {\n    if (lock !== void 0) {\n      setScrollLocked(lock);\n    }\n  }, [lock]);\n  useEffect(() => {\n    if (lock === void 0 && typeof window !== \"undefined\") {\n      window.document.body.style.overflow === \"hidden\" && setScrollLocked(true);\n    }\n  }, [setScrollLocked]);\n  return [scrollLocked, setScrollLocked];\n}\n\nexport { useScrollLock };","map":{"version":3,"mappings":";;;;;;AAKO,SAASA,aAAT,CAAuBC,IAAvB,EAEJ;AAAA,MAFiCC,OAEjC,uEAF2C;AAC5CC,sBAAkB,EAAE;AADwB,GAE3C;AACD,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCC,QAAQ,CAACL,IAAI,IAAI,KAAT,CAAhD;AACA,QAAMM,SAAS,GAAGC,MAAM,CAAC,CAAD,CAAxB;AACA,QAAM;AAAEL;AAAF,MAAyBD,OAA/B;AACA,QAAMO,UAAU,GAAGD,MAAM,CAAC,IAAD,CAAzB;;AACA,QAAME,UAAU,GAAG,MAAM;AACvBH,aAAS,CAACI,OAAV,GAAoBC,MAAM,CAACC,OAA3B;AACA,UAAMC,MAAM,GAAGC,aAAa,CAAC;AAAEZ;AAAF,KAAD,CAA5B;AACA,UAAMa,KAAK,GAAGC,YAAY,EAA1B;AACAC,gBAAY,CAACF,KAAD,EAAQF,MAAR,CAAZ;AACAK,kBAAc,CAACH,KAAD,CAAd;AACAP,cAAU,CAACE,OAAX,GAAqBK,KAArB;AACD,GAPD;;AAQA,QAAMI,YAAY,GAAG,MAAM;AACzB,QAAI,EAAEX,UAAU,IAAI,IAAd,GAAqB,KAAK,CAA1B,GAA8BA,UAAU,CAACE,OAA3C,CAAJ,EACE;AACFF,cAAU,CAACE,OAAX,CAAmBU,UAAnB,CAA8BC,WAA9B,CAA0Cb,UAAU,CAACE,OAArD;AACAF,cAAU,CAACE,OAAX,GAAqB,IAArB;AACD,GALD;;AAMAY,WAAS,CAAC,MAAM;AACd,QAAInB,YAAJ,EAAkB;AAChBM,gBAAU;AACX,KAFD,MAEO;AACLU,kBAAY;AACb;;AACD,WAAOA,YAAP;AACD,GAPQ,EAON,CAAChB,YAAD,CAPM,CAAT;AAQAmB,WAAS,CAAC,MAAM;AACd,QAAItB,IAAI,KAAK,KAAK,CAAlB,EAAqB;AACnBI,qBAAe,CAACJ,IAAD,CAAf;AACD;AACF,GAJQ,EAIN,CAACA,IAAD,CAJM,CAAT;AAKAsB,WAAS,CAAC,MAAM;AACd,QAAItB,IAAI,KAAK,KAAK,CAAd,IAAmB,OAAOW,MAAP,KAAkB,WAAzC,EAAsD;AACpDA,YAAM,CAACY,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2BC,QAA3B,KAAwC,QAAxC,IAAoDtB,eAAe,CAAC,IAAD,CAAnE;AACD;AACF,GAJQ,EAIN,CAACA,eAAD,CAJM,CAAT;AAKA,SAAO,CAACD,YAAD,EAAeC,eAAf,CAAP;AACF","names":["useScrollLock","lock","options","disableBodyPadding","scrollLocked","setScrollLocked","useState","scrollTop","useRef","stylesheet","lockScroll","current","window","scrollY","styles","getLockStyles","sheet","makeStyleTag","injectStyles","insertStyleTag","unlockScroll","parentNode","removeChild","useEffect","document","body","style","overflow"],"sources":["/Users/marceloperez/node_modules/@mantine/hooks/src/use-scroll-lock/use-scroll-lock.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nimport { getLockStyles } from './utils/get-lock-styles';\nimport { injectStyles } from './utils/inject-style-tag';\nimport { insertStyleTag } from './utils/insert-style-tag';\nimport { makeStyleTag } from './utils/make-style-tag';\n\nexport function useScrollLock(\n  lock?: boolean,\n  options = {\n    disableBodyPadding: false,\n  }\n) {\n  const [scrollLocked, setScrollLocked] = useState(lock || false);\n  const scrollTop = useRef(0);\n\n  const { disableBodyPadding } = options;\n\n  const stylesheet = useRef<CSSStyleSheet | any | null>(null);\n\n  const lockScroll = () => {\n    scrollTop.current = window.scrollY;\n\n    const styles = getLockStyles({ disableBodyPadding });\n\n    /**\n     * by applying styles via style tag\n     * we dont care about previous styles due to inheritance\n     * when scroll gets unlocked we delete that style tag\n     */\n    const sheet = makeStyleTag();\n\n    injectStyles(sheet, styles);\n    insertStyleTag(sheet);\n\n    stylesheet.current = sheet;\n  };\n\n  const unlockScroll = () => {\n    if (!stylesheet?.current) return;\n\n    stylesheet.current.parentNode.removeChild(stylesheet.current);\n    stylesheet.current = null;\n  };\n\n  useEffect(() => {\n    if (scrollLocked) {\n      lockScroll();\n    } else {\n      unlockScroll();\n    }\n\n    return unlockScroll;\n  }, [scrollLocked]);\n\n  useEffect(() => {\n    if (lock !== undefined) {\n      setScrollLocked(lock);\n    }\n  }, [lock]);\n\n  useEffect(() => {\n    if (lock === undefined && typeof window !== 'undefined') {\n      window.document.body.style.overflow === 'hidden' && setScrollLocked(true);\n    }\n  }, [setScrollLocked]);\n\n  return [scrollLocked, setScrollLocked] as const;\n}\n"]},"metadata":{},"sourceType":"module"}