{"ast":null,"code":"import _slicedToArray from \"/Users/marceloperez/Documents/my-portfolio/my-portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useState } from 'react';\n\nfunction getInputOnChange(setValue) {\n  return function (val) {\n    if (!val) {\n      setValue(val);\n    } else if (typeof val === \"function\") {\n      setValue(val);\n    } else if (typeof val === \"object\" && \"nativeEvent\" in val) {\n      var currentTarget = val.currentTarget;\n\n      if (currentTarget.type === \"checkbox\") {\n        setValue(currentTarget.checked);\n      } else {\n        setValue(currentTarget.value);\n      }\n    } else {\n      setValue(val);\n    }\n  };\n}\n\nfunction useInputState(initialState) {\n  var _useState = useState(initialState),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  return [value, getInputOnChange(setValue)];\n}\n\nexport { getInputOnChange, useInputState };","map":{"version":3,"mappings":";;;AACO,SAASA,gBAAT,CAA0BC,QAA1B,EAAoC;AACzC,SAAO,UAACC,GAAD,EAAS;AACd,QAAI,CAACA,GAAL,EAAU;AACRD,cAAQ,CAACC,GAAD,CAAR;AACD,KAFD,MAEO,IAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;AACpCD,cAAQ,CAACC,GAAD,CAAR;AACD,KAFM,MAEA,IAAI,OAAOA,GAAP,KAAe,QAAf,IAA2B,iBAAiBA,GAAhD,EAAqD;AAC1D,UAAQC,aAAR,GAA0BD,GAA1B,CAAQC,aAAR;;AACA,UAAIA,aAAa,CAACC,IAAd,KAAuB,UAA3B,EAAuC;AACrCH,gBAAQ,CAACE,aAAa,CAACE,OAAf,CAAR;AACD,OAFD,MAEO;AACLJ,gBAAQ,CAACE,aAAa,CAACG,KAAf,CAAR;AACD;AACF,KAPM,MAOA;AACLL,cAAQ,CAACC,GAAD,CAAR;AACD;AACF,GAfD;AAgBD;;AACM,SAASK,aAAT,CAAuBC,YAAvB,EAAqC;AAC1C,kBAA0BC,QAAQ,CAACD,YAAD,CAAlC;AAAA;AAAA,MAAOF,KAAP;AAAA,MAAcL,QAAd;;AACA,SAAO,CAACK,KAAD,EAAQN,gBAAgB,CAACC,QAAD,CAAxB,CAAP;AACF","names":["getInputOnChange","setValue","val","currentTarget","type","checked","value","useInputState","initialState","useState"],"sources":["/Users/marceloperez/node_modules/@mantine/hooks/src/use-input-state/use-input-state.ts"],"sourcesContent":["import React, { useState } from 'react';\n\nexport function getInputOnChange<T>(\n  setValue: (value: null | undefined | T | ((current: T) => T)) => void\n) {\n  return (val: null | undefined | T | React.ChangeEvent<any> | ((current: T) => T)) => {\n    if (!val) {\n      setValue(val as T);\n    } else if (typeof val === 'function') {\n      setValue(val);\n    } else if (typeof val === 'object' && 'nativeEvent' in val) {\n      const { currentTarget } = val;\n\n      if (currentTarget.type === 'checkbox') {\n        setValue((currentTarget as any).checked as any);\n      } else {\n        setValue(currentTarget.value as any);\n      }\n    } else {\n      setValue(val);\n    }\n  };\n}\n\nexport function useInputState<T>(initialState: T) {\n  const [value, setValue] = useState(initialState);\n  return [value, getInputOnChange<T>(setValue)] as [\n    T,\n    (value: null | undefined | T | React.ChangeEvent<any>) => void\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}