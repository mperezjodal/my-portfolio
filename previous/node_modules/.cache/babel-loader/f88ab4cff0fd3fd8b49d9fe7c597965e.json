{"ast":null,"code":"import _slicedToArray from \"/Users/marceloperez/Documents/my-portfolio/my-portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useRef, useState, useEffect } from 'react';\n\nfunction useUncontrolled(_ref) {\n  var value = _ref.value,\n      defaultValue = _ref.defaultValue,\n      finalValue = _ref.finalValue,\n      rule = _ref.rule,\n      onChange = _ref.onChange,\n      onValueUpdate = _ref.onValueUpdate;\n  var shouldBeControlled = rule(value);\n  var modeRef = useRef(\"initial\");\n  var initialValue = rule(defaultValue) ? defaultValue : finalValue;\n\n  var _useState = useState(initialValue),\n      _useState2 = _slicedToArray(_useState, 2),\n      uncontrolledValue = _useState2[0],\n      setUncontrolledValue = _useState2[1];\n\n  var effectiveValue = shouldBeControlled ? value : uncontrolledValue;\n\n  if (!shouldBeControlled && modeRef.current === \"controlled\") {\n    effectiveValue = finalValue;\n  }\n\n  modeRef.current = shouldBeControlled ? \"controlled\" : \"uncontrolled\";\n  var mode = modeRef.current;\n\n  var handleChange = function handleChange(nextValue) {\n    typeof onChange === \"function\" && onChange(nextValue);\n\n    if (mode === \"uncontrolled\") {\n      setUncontrolledValue(nextValue);\n    }\n  };\n\n  useEffect(function () {\n    if (mode === \"uncontrolled\") {\n      setUncontrolledValue(effectiveValue);\n    }\n\n    typeof onValueUpdate === \"function\" && onValueUpdate(effectiveValue);\n  }, [mode, effectiveValue]);\n  return [effectiveValue, handleChange, modeRef.current];\n}\n\nexport { useUncontrolled };","map":{"version":3,"mappings":";;;AACO,SAASA,eAAT,OAOJ;AAAA,MANDC,KAMC,QANDA,KAMC;AAAA,MALDC,YAKC,QALDA,YAKC;AAAA,MAJDC,UAIC,QAJDA,UAIC;AAAA,MAHDC,IAGC,QAHDA,IAGC;AAAA,MAFDC,QAEC,QAFDA,QAEC;AAAA,MADDC,aACC,QADDA,aACC;AACD,MAAMC,kBAAkB,GAAGH,IAAI,CAACH,KAAD,CAA/B;AACA,MAAMO,OAAO,GAAGC,MAAM,CAAC,SAAD,CAAtB;AACA,MAAMC,YAAY,GAAGN,IAAI,CAACF,YAAD,CAAJ,GAAqBA,YAArB,GAAoCC,UAAzD;;AACA,kBAAkDQ,QAAQ,CAACD,YAAD,CAA1D;AAAA;AAAA,MAAOE,iBAAP;AAAA,MAA0BC,oBAA1B;;AACA,MAAIC,cAAc,GAAGP,kBAAkB,GAAGN,KAAH,GAAWW,iBAAlD;;AACA,MAAI,CAACL,kBAAD,IAAuBC,OAAO,CAACO,OAAR,KAAoB,YAA/C,EAA6D;AAC3DD,kBAAc,GAAGX,UAAjB;AACD;;AACDK,SAAO,CAACO,OAAR,GAAkBR,kBAAkB,GAAG,YAAH,GAAkB,cAAtD;AACA,MAAMS,IAAI,GAAGR,OAAO,CAACO,OAArB;;AACA,MAAME,YAAY,GAAG,SAAfA,YAAe,CAACC,SAAD,EAAe;AAClC,WAAOb,QAAP,KAAoB,UAApB,IAAkCA,QAAQ,CAACa,SAAD,CAA1C;;AACA,QAAIF,IAAI,KAAK,cAAb,EAA6B;AAC3BH,0BAAoB,CAACK,SAAD,CAApB;AACD;AACF,GALD;;AAMAC,WAAS,CAAC,YAAM;AACd,QAAIH,IAAI,KAAK,cAAb,EAA6B;AAC3BH,0BAAoB,CAACC,cAAD,CAApB;AACD;;AACD,WAAOR,aAAP,KAAyB,UAAzB,IAAuCA,aAAa,CAACQ,cAAD,CAApD;AACD,GALQ,EAKN,CAACE,IAAD,EAAOF,cAAP,CALM,CAAT;AAMA,SAAO,CAACA,cAAD,EAAiBG,YAAjB,EAA+BT,OAAO,CAACO,OAAvC,CAAP;AACF","names":["useUncontrolled","value","defaultValue","finalValue","rule","onChange","onValueUpdate","shouldBeControlled","modeRef","useRef","initialValue","useState","uncontrolledValue","setUncontrolledValue","effectiveValue","current","mode","handleChange","nextValue","useEffect"],"sources":["/Users/marceloperez/node_modules/@mantine/hooks/src/use-uncontrolled/use-uncontrolled.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nexport type UncontrolledMode = 'initial' | 'controlled' | 'uncontrolled';\n\nexport interface UncontrolledOptions<T> {\n  value: T | null | undefined;\n  defaultValue: T | null | undefined;\n  finalValue: T | null;\n  onChange(value: T | null): void;\n  onValueUpdate?(value: T | null): void;\n  rule: (value: T | null | undefined) => boolean;\n}\n\nexport function useUncontrolled<T>({\n  value,\n  defaultValue,\n  finalValue,\n  rule,\n  onChange,\n  onValueUpdate,\n}: UncontrolledOptions<T>): readonly [T | null, (nextValue: T | null) => void, UncontrolledMode] {\n  // determine, whether new props indicate controlled state\n  const shouldBeControlled = rule(value);\n\n  // initialize state\n  const modeRef = useRef<UncontrolledMode>('initial');\n  const initialValue = rule(defaultValue) ? defaultValue : finalValue;\n  const [uncontrolledValue, setUncontrolledValue] = useState(initialValue);\n\n  // compute effective value\n  let effectiveValue = shouldBeControlled ? value : uncontrolledValue;\n\n  if (!shouldBeControlled && modeRef.current === 'controlled') {\n    // We are transitioning from controlled to uncontrolled\n    // this transition is special as it happens when clearing out\n    // the input using \"invalid\" value (typically null or undefined).\n    //\n    // Since the value is invalid, doing nothing would mean just\n    // transitioning to uncontrolled state and using whatever value\n    // it currently holds which is likely not the behavior\n    // user expects, so lets change the state to finalValue.\n    //\n    // The value will be propagated to internal state by useEffect below.\n\n    effectiveValue = finalValue;\n  }\n\n  modeRef.current = shouldBeControlled ? 'controlled' : 'uncontrolled';\n  const mode = modeRef.current;\n\n  const handleChange = (nextValue: T | null) => {\n    typeof onChange === 'function' && onChange(nextValue);\n\n    // Controlled input only triggers onChange event and expects\n    // the controller to propagate new value back.\n    if (mode === 'uncontrolled') {\n      setUncontrolledValue(nextValue);\n    }\n  };\n\n  useEffect(() => {\n    if (mode === 'uncontrolled') {\n      setUncontrolledValue(effectiveValue);\n    }\n    typeof onValueUpdate === 'function' && onValueUpdate(effectiveValue);\n  }, [mode, effectiveValue]);\n\n  return [effectiveValue, handleChange, modeRef.current] as const;\n}\n"]},"metadata":{},"sourceType":"module"}