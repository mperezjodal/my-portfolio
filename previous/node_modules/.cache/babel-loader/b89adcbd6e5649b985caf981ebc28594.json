{"ast":null,"code":"import { useState, useRef, useEffect } from 'react';\n\nfunction useDebouncedValue(value, wait) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    leading: false\n  };\n  const [_value, setValue] = useState(value);\n  const mountedRef = useRef(false);\n  const timeoutRef = useRef(null);\n  const cooldownRef = useRef(false);\n\n  const cancel = () => window.clearTimeout(timeoutRef.current);\n\n  useEffect(() => {\n    if (mountedRef.current) {\n      if (!cooldownRef.current && options.leading) {\n        cooldownRef.current = true;\n        setValue(value);\n      } else {\n        cancel();\n        timeoutRef.current = window.setTimeout(() => {\n          cooldownRef.current = false;\n          setValue(value);\n        }, wait);\n      }\n    }\n  }, [value, options.leading]);\n  useEffect(() => {\n    mountedRef.current = true;\n    return cancel;\n  }, []);\n  return [_value, cancel];\n}\n\nexport { useDebouncedValue };","map":{"version":3,"mappings":";;AACO,SAASA,iBAAT,CAA2BC,KAA3B,EAAkCC,IAAlC,EAAsE;AAAA,MAA9BC,OAA8B,uEAApB;AAAEC,WAAO,EAAE;AAAX,GAAoB;AAC3E,QAAM,CAACC,MAAD,EAASC,QAAT,IAAqBC,QAAQ,CAACN,KAAD,CAAnC;AACA,QAAMO,UAAU,GAAGC,MAAM,CAAC,KAAD,CAAzB;AACA,QAAMC,UAAU,GAAGD,MAAM,CAAC,IAAD,CAAzB;AACA,QAAME,WAAW,GAAGF,MAAM,CAAC,KAAD,CAA1B;;AACA,QAAMG,MAAM,GAAG,MAAMC,MAAM,CAACC,YAAP,CAAoBJ,UAAU,CAACK,OAA/B,CAArB;;AACAC,WAAS,CAAC,MAAM;AACd,QAAIR,UAAU,CAACO,OAAf,EAAwB;AACtB,UAAI,CAACJ,WAAW,CAACI,OAAb,IAAwBZ,OAAO,CAACC,OAApC,EAA6C;AAC3CO,mBAAW,CAACI,OAAZ,GAAsB,IAAtB;AACAT,gBAAQ,CAACL,KAAD,CAAR;AACD,OAHD,MAGO;AACLW,cAAM;AACNF,kBAAU,CAACK,OAAX,GAAqBF,MAAM,CAACI,UAAP,CAAkB,MAAM;AAC3CN,qBAAW,CAACI,OAAZ,GAAsB,KAAtB;AACAT,kBAAQ,CAACL,KAAD,CAAR;AACD,SAHoB,EAGlBC,IAHkB,CAArB;AAID;AACF;AACF,GAbQ,EAaN,CAACD,KAAD,EAAQE,OAAO,CAACC,OAAhB,CAbM,CAAT;AAcAY,WAAS,CAAC,MAAM;AACdR,cAAU,CAACO,OAAX,GAAqB,IAArB;AACA,WAAOH,MAAP;AACD,GAHQ,EAGN,EAHM,CAAT;AAIA,SAAO,CAACP,MAAD,EAASO,MAAT,CAAP;AACF","names":["useDebouncedValue","value","wait","options","leading","_value","setValue","useState","mountedRef","useRef","timeoutRef","cooldownRef","cancel","window","clearTimeout","current","useEffect","setTimeout"],"sources":["/Users/marceloperez/node_modules/@mantine/hooks/src/use-debounced-value/use-debounced-value.ts"],"sourcesContent":["import { useEffect, useState, useRef } from 'react';\n\nexport function useDebouncedValue<T = any>(value: T, wait: number, options = { leading: false }) {\n  const [_value, setValue] = useState(value);\n  const mountedRef = useRef(false);\n  const timeoutRef = useRef<number>(null);\n  const cooldownRef = useRef(false);\n\n  const cancel = () => window.clearTimeout(timeoutRef.current);\n\n  useEffect(() => {\n    if (mountedRef.current) {\n      if (!cooldownRef.current && options.leading) {\n        cooldownRef.current = true;\n        setValue(value);\n      } else {\n        cancel();\n        timeoutRef.current = window.setTimeout(() => {\n          cooldownRef.current = false;\n          setValue(value);\n        }, wait);\n      }\n    }\n  }, [value, options.leading]);\n\n  useEffect(() => {\n    mountedRef.current = true;\n    return cancel;\n  }, []);\n\n  return [_value, cancel] as const;\n}\n"]},"metadata":{},"sourceType":"module"}