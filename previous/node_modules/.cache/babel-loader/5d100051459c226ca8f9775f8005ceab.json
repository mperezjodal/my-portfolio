{"ast":null,"code":"import React, { Children } from 'react';\nimport { useMantineDefaultProps } from '@mantine/styles';\nimport useStyles from './MediaQuery.styles.js';\n\nfunction MediaQuery(props) {\n  var _a;\n\n  const {\n    children,\n    smallerThan,\n    largerThan,\n    query,\n    styles,\n    className\n  } = useMantineDefaultProps(\"MediaQuery\", {}, props);\n  const {\n    classes,\n    cx\n  } = useStyles({\n    smallerThan,\n    largerThan,\n    query,\n    styles\n  }, {\n    name: \"MediaQuery\"\n  });\n  const child = Children.only(children);\n\n  if (typeof child === \"object\" && child !== null && \"props\" in child) {\n    return React.cloneElement(child, {\n      className: cx(classes.media, (_a = child.props) == null ? void 0 : _a.className, className)\n    });\n  }\n\n  return child;\n}\n\nMediaQuery.displayName = \"@mantine/core/MediaQuery\";\nexport { MediaQuery };","map":{"version":3,"mappings":";;;;AAGO,SAASA,UAAT,CAAoBC,KAApB,EAA2B;AAChC,MAAIC,EAAJ;;AACA,QAAM;AAAEC,YAAF;AAAYC,eAAZ;AAAyBC,cAAzB;AAAqCC,SAArC;AAA4CC,UAA5C;AAAoDC;AAApD,MAAkEC,sBAAsB,CAAC,YAAD,EAAe,EAAf,EAAmBR,KAAnB,CAA9F;AACA,QAAM;AAAES,WAAF;AAAWC;AAAX,MAAkBC,SAAS,CAAC;AAAER,eAAF;AAAeC,cAAf;AAA2BC,SAA3B;AAAkCC;AAAlC,GAAD,EAA6C;AAAEM,QAAI,EAAE;AAAR,GAA7C,CAAjC;AACA,QAAMC,KAAK,GAAGC,QAAQ,CAACC,IAAT,CAAcb,QAAd,CAAd;;AACA,MAAI,OAAOW,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAAvC,IAA+C,WAAWA,KAA9D,EAAqE;AACnE,WAAOG,KAAK,CAACC,YAAN,CAAmBJ,KAAnB,EAA0B;AAC/BN,eAAS,EAAEG,EAAE,CAACD,OAAO,CAACS,KAAT,EAAgB,CAACjB,EAAE,GAAGY,KAAK,CAACb,KAAZ,KAAsB,IAAtB,GAA6B,KAAK,CAAlC,GAAsCC,EAAE,CAACM,SAAzD,EAAoEA,SAApE;AADkB,KAA1B,CAAP;AAGD;;AACD,SAAOM,KAAP;AACD;;AACDd,UAAU,CAACoB,WAAX,GAAyB,0BAAzB","names":["MediaQuery","props","_a","children","smallerThan","largerThan","query","styles","className","useMantineDefaultProps","classes","cx","useStyles","name","child","Children","only","React","cloneElement","media","displayName"],"sources":["/Users/marceloperez/node_modules/@mantine/core/src/components/MediaQuery/MediaQuery.tsx"],"sourcesContent":["import React, { Children } from 'react';\nimport { MantineNumberSize, CSSObject, useMantineDefaultProps } from '@mantine/styles';\nimport useStyles from './MediaQuery.styles';\n\nexport interface MediaQueryProps {\n  className?: string;\n\n  /** Child that should be shown at given breakpoint, it must accept className prop */\n  children: React.ReactNode;\n\n  /** Styles applied to child when viewport is smaller than given breakpoint */\n  smallerThan?: MantineNumberSize;\n\n  /** Styles applied to child when viewport is larger than given breakpoint */\n  largerThan?: MantineNumberSize;\n\n  /** Any other media query */\n  query?: string;\n\n  /** Styles applied to child when breakpoint matches */\n  styles: CSSObject;\n}\n\nexport function MediaQuery(props: MediaQueryProps) {\n  const { children, smallerThan, largerThan, query, styles, className } = useMantineDefaultProps(\n    'MediaQuery',\n    {},\n    props\n  );\n\n  const { classes, cx } = useStyles(\n    { smallerThan, largerThan, query, styles },\n    { name: 'MediaQuery' }\n  );\n\n  const child = Children.only(children) as React.ReactElement;\n\n  if (typeof child === 'object' && child !== null && 'props' in child) {\n    return React.cloneElement(child, {\n      className: cx(classes.media, child.props?.className, className),\n    });\n  }\n\n  return child;\n}\n\nMediaQuery.displayName = '@mantine/core/MediaQuery';\n"]},"metadata":{},"sourceType":"module"}