{"ast":null,"code":"import { useState } from 'react';\n\nfunction useClipboard() {\n  let {\n    timeout = 2e3\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const [error, setError] = useState(null);\n  const [copied, setCopied] = useState(false);\n  const [copyTimeout, setCopyTimeout] = useState(null);\n\n  const handleCopyResult = value => {\n    clearTimeout(copyTimeout);\n    setCopyTimeout(setTimeout(() => setCopied(false), timeout));\n    setCopied(value);\n  };\n\n  const copy = valueToCopy => {\n    if (\"clipboard\" in navigator) {\n      navigator.clipboard.writeText(valueToCopy).then(() => handleCopyResult(true)).catch(err => setError(err));\n    } else {\n      setError(new Error(\"useClipboard: navigator.clipboard is not supported\"));\n    }\n  };\n\n  const reset = () => {\n    setCopied(false);\n    setError(null);\n    clearTimeout(copyTimeout);\n  };\n\n  return {\n    copy,\n    reset,\n    error,\n    copied\n  };\n}\n\nexport { useClipboard };","map":{"version":3,"mappings":";;AACO,SAASA,YAAT,GAA8C;AAAA,MAAxB;AAAEC,WAAO,GAAG;AAAZ,GAAwB,uEAAJ,EAAI;AACnD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBC,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBF,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACG,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAAC,IAAD,CAA9C;;AACA,QAAMK,gBAAgB,GAAIC,KAAD,IAAW;AAClCC,gBAAY,CAACJ,WAAD,CAAZ;AACAC,kBAAc,CAACI,UAAU,CAAC,MAAMN,SAAS,CAAC,KAAD,CAAhB,EAAyBL,OAAzB,CAAX,CAAd;AACAK,aAAS,CAACI,KAAD,CAAT;AACD,GAJD;;AAKA,QAAMG,IAAI,GAAIC,WAAD,IAAiB;AAC5B,QAAI,eAAeC,SAAnB,EAA8B;AAC5BA,eAAS,CAACC,SAAV,CAAoBC,SAApB,CAA8BH,WAA9B,EAA2CI,IAA3C,CAAgD,MAAMT,gBAAgB,CAAC,IAAD,CAAtE,EAA8EU,KAA9E,CAAqFC,GAAD,IAASjB,QAAQ,CAACiB,GAAD,CAArG;AACD,KAFD,MAEO;AACLjB,cAAQ,CAAC,IAAIkB,KAAJ,CAAU,oDAAV,CAAD,CAAR;AACD;AACF,GAND;;AAOA,QAAMC,KAAK,GAAG,MAAM;AAClBhB,aAAS,CAAC,KAAD,CAAT;AACAH,YAAQ,CAAC,IAAD,CAAR;AACAQ,gBAAY,CAACJ,WAAD,CAAZ;AACD,GAJD;;AAKA,SAAO;AAAEM,QAAF;AAAQS,SAAR;AAAepB,SAAf;AAAsBG;AAAtB,GAAP;AACF","names":["useClipboard","timeout","error","setError","useState","copied","setCopied","copyTimeout","setCopyTimeout","handleCopyResult","value","clearTimeout","setTimeout","copy","valueToCopy","navigator","clipboard","writeText","then","catch","err","Error","reset"],"sources":["/Users/marceloperez/node_modules/@mantine/hooks/src/use-clipboard/use-clipboard.ts"],"sourcesContent":["import { useState } from 'react';\n\nexport function useClipboard({ timeout = 2000 } = {}) {\n  const [error, setError] = useState<Error>(null);\n  const [copied, setCopied] = useState(false);\n  const [copyTimeout, setCopyTimeout] = useState(null);\n\n  const handleCopyResult = (value: boolean) => {\n    clearTimeout(copyTimeout);\n    setCopyTimeout(setTimeout(() => setCopied(false), timeout));\n    setCopied(value);\n  };\n\n  const copy = (valueToCopy: any) => {\n    if ('clipboard' in navigator) {\n      navigator.clipboard\n        .writeText(valueToCopy)\n        .then(() => handleCopyResult(true))\n        .catch((err) => setError(err));\n    } else {\n      setError(new Error('useClipboard: navigator.clipboard is not supported'));\n    }\n  };\n\n  const reset = () => {\n    setCopied(false);\n    setError(null);\n    clearTimeout(copyTimeout);\n  };\n\n  return { copy, reset, error, copied };\n}\n"]},"metadata":{},"sourceType":"module"}