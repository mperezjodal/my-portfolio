{"ast":null,"code":"import { createStyles } from '@mantine/styles';\nconst POSITIONS = {\n  left: \"flex-start\",\n  center: \"center\",\n  right: \"flex-end\",\n  apart: \"space-between\"\n};\nvar useStyles = createStyles((theme, _ref) => {\n  let {\n    spacing,\n    position,\n    noWrap,\n    direction,\n    grow,\n    align,\n    count\n  } = _ref;\n  return {\n    root: {\n      boxSizing: \"border-box\",\n      display: \"flex\",\n      flexDirection: direction,\n      alignItems: align || (direction === \"row\" ? \"center\" : grow ? \"stretch\" : position === \"apart\" ? \"flex-start\" : POSITIONS[position]),\n      flexWrap: noWrap ? \"nowrap\" : \"wrap\",\n      justifyContent: direction === \"row\" ? POSITIONS[position] : void 0,\n      gap: theme.fn.size({\n        size: spacing,\n        sizes: theme.spacing\n      })\n    },\n    child: {\n      boxSizing: \"border-box\",\n      maxWidth: grow && direction === \"row\" ? `calc(${100 / count}% - ${theme.fn.size({\n        size: spacing,\n        sizes: theme.spacing\n      }) - theme.fn.size({\n        size: spacing,\n        sizes: theme.spacing\n      }) / count}px)` : void 0,\n      flexGrow: grow ? 1 : 0\n    }\n  };\n});\nexport default useStyles;","map":{"version":3,"mappings":";AACA,MAAMA,SAAS,GAAG;AAChBC,MAAI,EAAE,YADU;AAEhBC,QAAM,EAAE,QAFQ;AAGhBC,OAAK,EAAE,UAHS;AAIhBC,OAAK,EAAE;AAJS,CAAlB;AAMA,gBAAeC,YAAY,CAAC,CAACC,KAAD;AAAA,MAAQ;AAAEC,WAAF;AAAWC,YAAX;AAAqBC,UAArB;AAA6BC,aAA7B;AAAwCC,QAAxC;AAA8CC,SAA9C;AAAqDC;AAArD,GAAR;AAAA,SAA0E;AACpGC,QAAI,EAAE;AACJC,eAAS,EAAE,YADP;AAEJC,aAAO,EAAE,MAFL;AAGJC,mBAAa,EAAEP,SAHX;AAIJQ,gBAAU,EAAEN,KAAK,KAAKF,SAAS,KAAK,KAAd,GAAsB,QAAtB,GAAiCC,IAAI,GAAG,SAAH,GAAeH,QAAQ,KAAK,OAAb,GAAuB,YAAvB,GAAsCR,SAAS,CAACQ,QAAD,CAAxG,CAJb;AAKJW,cAAQ,EAAEV,MAAM,GAAG,QAAH,GAAc,MAL1B;AAMJW,oBAAc,EAAEV,SAAS,KAAK,KAAd,GAAsBV,SAAS,CAACQ,QAAD,CAA/B,GAA4C,KAAK,CAN7D;AAOJa,SAAG,EAAEf,KAAK,CAACgB,EAAN,CAASC,IAAT,CAAc;AAAEA,YAAI,EAAEhB,OAAR;AAAiBiB,aAAK,EAAElB,KAAK,CAACC;AAA9B,OAAd;AAPD,KAD8F;AAUpGkB,SAAK,EAAE;AACLV,eAAS,EAAE,YADN;AAELW,cAAQ,EAAEf,IAAI,IAAID,SAAS,KAAK,KAAtB,GAA+B,QAAO,MAAMG,KAAM,OAAMP,KAAK,CAACgB,EAAN,CAASC,IAAT,CAAc;AAAEA,YAAI,EAAEhB,OAAR;AAAiBiB,aAAK,EAAElB,KAAK,CAACC;AAA9B,OAAd,IAAyDD,KAAK,CAACgB,EAAN,CAASC,IAAT,CAAc;AAAEA,YAAI,EAAEhB,OAAR;AAAiBiB,aAAK,EAAElB,KAAK,CAACC;AAA9B,OAAd,IAAyDM,KAAM,KAAhL,GAAuL,KAAK,CAFjM;AAGLc,cAAQ,EAAEhB,IAAI,GAAG,CAAH,GAAO;AAHhB;AAV6F,GAA1E;AAAA,CAAD,CAA3B","names":["POSITIONS","left","center","right","apart","createStyles","theme","spacing","position","noWrap","direction","grow","align","count","root","boxSizing","display","flexDirection","alignItems","flexWrap","justifyContent","gap","fn","size","sizes","child","maxWidth","flexGrow"],"sources":["/Users/marceloperez/node_modules/@mantine/core/src/components/Group/Group.styles.ts"],"sourcesContent":["import React from 'react';\nimport { createStyles, MantineNumberSize } from '@mantine/styles';\n\nexport type GroupPosition = 'right' | 'center' | 'left' | 'apart';\n\nexport interface GroupStylesParams {\n  position: GroupPosition;\n  noWrap: boolean;\n  grow: boolean;\n  spacing: MantineNumberSize;\n  direction: 'row' | 'column';\n  align: React.CSSProperties['alignItems'];\n  count: number;\n}\n\nconst POSITIONS = {\n  left: 'flex-start',\n  center: 'center',\n  right: 'flex-end',\n  apart: 'space-between',\n};\n\nexport default createStyles(\n  (theme, { spacing, position, noWrap, direction, grow, align, count }: GroupStylesParams) => ({\n    root: {\n      boxSizing: 'border-box',\n      display: 'flex',\n      flexDirection: direction,\n      alignItems:\n        align ||\n        (direction === 'row'\n          ? 'center'\n          : grow\n          ? 'stretch'\n          : position === 'apart'\n          ? 'flex-start'\n          : POSITIONS[position]),\n      flexWrap: noWrap ? 'nowrap' : 'wrap',\n      justifyContent: direction === 'row' ? POSITIONS[position] : undefined,\n      gap: theme.fn.size({ size: spacing, sizes: theme.spacing }),\n    },\n\n    child: {\n      boxSizing: 'border-box',\n      maxWidth:\n        grow && direction === 'row'\n          ? `calc(${100 / count}% - ${\n              theme.fn.size({ size: spacing, sizes: theme.spacing }) -\n              theme.fn.size({ size: spacing, sizes: theme.spacing }) / count\n            }px)`\n          : undefined,\n      flexGrow: grow ? 1 : 0,\n    },\n  })\n);\n"]},"metadata":{},"sourceType":"module"}