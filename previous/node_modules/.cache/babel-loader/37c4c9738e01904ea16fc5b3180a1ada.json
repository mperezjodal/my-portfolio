{"ast":null,"code":"import _slicedToArray from \"/Users/marceloperez/Documents/my-portfolio/my-portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useState, useRef, useCallback } from 'react';\n\nfunction useIntersection(options) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      entry = _useState2[0],\n      setEntry = _useState2[1];\n\n  var observer = useRef();\n  var ref = useCallback(function (element) {\n    if (observer.current) {\n      observer.current.disconnect();\n      observer.current = null;\n    }\n\n    if (element === null) {\n      setEntry(null);\n      return;\n    }\n\n    observer.current = new IntersectionObserver(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 1),\n          _entry = _ref2[0];\n\n      setEntry(_entry);\n    }, options);\n    observer.current.observe(element);\n  }, [options == null ? void 0 : options.rootMargin, options == null ? void 0 : options.root, options == null ? void 0 : options.threshold]);\n  return [ref, entry];\n}\n\nexport { useIntersection };","map":{"version":3,"mappings":";;;AACO,SAASA,eAAT,CAAyBC,OAAzB,EAAkC;AACvC,kBAA0BC,QAAQ,CAAC,IAAD,CAAlC;AAAA;AAAA,MAAOC,KAAP;AAAA,MAAcC,QAAd;;AACA,MAAMC,QAAQ,GAAGC,MAAM,EAAvB;AACA,MAAMC,GAAG,GAAGC,WAAW,CAAC,UAACC,OAAD,EAAa;AACnC,QAAIJ,QAAQ,CAACK,OAAb,EAAsB;AACpBL,cAAQ,CAACK,OAAT,CAAiBC,UAAjB;AACAN,cAAQ,CAACK,OAAT,GAAmB,IAAnB;AACD;;AACD,QAAID,OAAO,KAAK,IAAhB,EAAsB;AACpBL,cAAQ,CAAC,IAAD,CAAR;AACA;AACD;;AACDC,YAAQ,CAACK,OAAT,GAAmB,IAAIE,oBAAJ,CAAyB,gBAAc;AAAA;AAAA,UAAZC,MAAY;;AACxDT,cAAQ,CAACS,MAAD,CAAR;AACD,KAFkB,EAEhBZ,OAFgB,CAAnB;AAGAI,YAAQ,CAACK,OAAT,CAAiBI,OAAjB,CAAyBL,OAAzB;AACD,GAbsB,EAapB,CAACR,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACc,UAApC,EAAgDd,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACe,IAAnF,EAAyFf,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACgB,SAA5H,CAboB,CAAvB;AAcA,SAAO,CAACV,GAAD,EAAMJ,KAAN,CAAP;AACF","names":["useIntersection","options","useState","entry","setEntry","observer","useRef","ref","useCallback","element","current","disconnect","IntersectionObserver","_entry","observe","rootMargin","root","threshold"],"sources":["/Users/marceloperez/node_modules/@mantine/hooks/src/use-intersection/use-intersection.ts"],"sourcesContent":["import { useCallback, useRef, useState } from 'react';\n\nexport function useIntersection<T extends HTMLElement = any>(\n  options?: ConstructorParameters<typeof IntersectionObserver>[1]\n): readonly [(element: T | null) => void, IntersectionObserverEntry | null] {\n  const [entry, setEntry] = useState<IntersectionObserverEntry>(null);\n\n  const observer = useRef<IntersectionObserver>();\n\n  const ref = useCallback(\n    (element: T | null) => {\n      if (observer.current) {\n        observer.current.disconnect();\n        observer.current = null;\n      }\n\n      if (element === null) {\n        setEntry(null);\n        return;\n      }\n\n      observer.current = new IntersectionObserver(([_entry]) => {\n        setEntry(_entry);\n      }, options);\n\n      observer.current.observe(element);\n    },\n    [options?.rootMargin, options?.root, options?.threshold]\n  );\n\n  return [ref, entry] as const;\n}\n"]},"metadata":{},"sourceType":"module"}