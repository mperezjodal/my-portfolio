{"ast":null,"code":"import _toConsumableArray from \"/Users/marceloperez/Documents/my-portfolio/my-portfolio/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/marceloperez/Documents/my-portfolio/my-portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useState } from 'react';\n\nfunction useQueue(_ref) {\n  var _ref$initialValues = _ref.initialValues,\n      initialValues = _ref$initialValues === void 0 ? [] : _ref$initialValues,\n      limit = _ref.limit;\n\n  var _useState = useState({\n    state: initialValues.slice(0, limit),\n    queue: initialValues.slice(limit)\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      _useState2$ = _useState2[0],\n      state = _useState2$.state,\n      queue = _useState2$.queue,\n      setState = _useState2[1];\n\n  var add = function add() {\n    for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {\n      items[_key] = arguments[_key];\n    }\n\n    return setState(function (current) {\n      var results = [].concat(_toConsumableArray(current.state), _toConsumableArray(current.queue), items);\n      return {\n        state: results.slice(0, limit),\n        queue: results.slice(limit)\n      };\n    });\n  };\n\n  var update = function update(fn) {\n    return setState(function (current) {\n      var results = fn([].concat(_toConsumableArray(current.state), _toConsumableArray(current.queue)));\n      return {\n        state: results.slice(0, limit),\n        queue: results.slice(limit)\n      };\n    });\n  };\n\n  var cleanQueue = function cleanQueue() {\n    return setState(function (current) {\n      return {\n        state: current.state,\n        queue: []\n      };\n    });\n  };\n\n  return {\n    state: state,\n    queue: queue,\n    add: add,\n    update: update,\n    cleanQueue: cleanQueue\n  };\n}\n\nexport { useQueue };","map":{"version":3,"mappings":";;;;AACO,SAASA,QAAT,OAAiD;AAAA,gCAA7BC,aAA6B;AAAA,MAA7BA,aAA6B,mCAAb,EAAa;AAAA,MAATC,KAAS,QAATA,KAAS;;AACtD,kBAAqCC,QAAQ,CAAC;AAC5CC,SAAK,EAAEH,aAAa,CAACI,KAAd,CAAoB,CAApB,EAAuBH,KAAvB,CADqC;AAE5CI,SAAK,EAAEL,aAAa,CAACI,KAAd,CAAoBH,KAApB;AAFqC,GAAD,CAA7C;AAAA;AAAA;AAAA,MAASE,KAAT,eAASA,KAAT;AAAA,MAAgBE,KAAhB,eAAgBA,KAAhB;AAAA,MAAyBC,QAAzB;;AAIA,MAAMC,GAAG,GAAG,SAANA,GAAM;AAAA,sCAAIC,KAAJ;AAAIA,WAAJ;AAAA;;AAAA,WAAcF,QAAQ,CAAC,UAACG,OAAD,EAAa;AAC9C,UAAMC,OAAO,gCAAOD,OAAO,CAACN,KAAf,sBAAyBM,OAAO,CAACJ,KAAjC,GAA2CG,KAA3C,CAAb;AACA,aAAO;AACLL,aAAK,EAAEO,OAAO,CAACN,KAAR,CAAc,CAAd,EAAiBH,KAAjB,CADF;AAELI,aAAK,EAAEK,OAAO,CAACN,KAAR,CAAcH,KAAd;AAFF,OAAP;AAID,KANiC,CAAtB;AAAA,GAAZ;;AAOA,MAAMU,MAAM,GAAG,SAATA,MAAS,CAACC,EAAD;AAAA,WAAQN,QAAQ,CAAC,UAACG,OAAD,EAAa;AAC3C,UAAMC,OAAO,GAAGE,EAAE,8BAAKH,OAAO,CAACN,KAAb,sBAAuBM,OAAO,CAACJ,KAA/B,GAAlB;AACA,aAAO;AACLF,aAAK,EAAEO,OAAO,CAACN,KAAR,CAAc,CAAd,EAAiBH,KAAjB,CADF;AAELI,aAAK,EAAEK,OAAO,CAACN,KAAR,CAAcH,KAAd;AAFF,OAAP;AAID,KAN8B,CAAhB;AAAA,GAAf;;AAOA,MAAMY,UAAU,GAAG,SAAbA,UAAa;AAAA,WAAMP,QAAQ,CAAC,UAACG,OAAD;AAAA,aAAc;AAAEN,aAAK,EAAEM,OAAO,CAACN,KAAjB;AAAwBE,aAAK,EAAE;AAA/B,OAAd;AAAA,KAAD,CAAd;AAAA,GAAnB;;AACA,SAAO;AACLF,SAAK,EAALA,KADK;AAELE,SAAK,EAALA,KAFK;AAGLE,OAAG,EAAHA,GAHK;AAILI,UAAM,EAANA,MAJK;AAKLE,cAAU,EAAVA;AALK,GAAP;AAOF","names":["useQueue","initialValues","limit","useState","state","slice","queue","setState","add","items","current","results","update","fn","cleanQueue"],"sources":["/Users/marceloperez/node_modules/@mantine/hooks/src/use-queue/use-queue.ts"],"sourcesContent":["import { useState } from 'react';\n\nexport function useQueue<T>({ initialValues = [], limit }: { initialValues?: T[]; limit: number }) {\n  const [{ state, queue }, setState] = useState({\n    state: initialValues.slice(0, limit),\n    queue: initialValues.slice(limit),\n  });\n\n  const add = (...items: T[]) =>\n    setState((current) => {\n      const results = [...current.state, ...current.queue, ...items];\n\n      return {\n        state: results.slice(0, limit),\n        queue: results.slice(limit),\n      };\n    });\n\n  const update = (fn: (state: T[]) => T[]) =>\n    setState((current) => {\n      const results = fn([...current.state, ...current.queue]);\n\n      return {\n        state: results.slice(0, limit),\n        queue: results.slice(limit),\n      };\n    });\n\n  const cleanQueue = () => setState((current) => ({ state: current.state, queue: [] }));\n\n  return {\n    state,\n    queue,\n    add,\n    update,\n    cleanQueue,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}