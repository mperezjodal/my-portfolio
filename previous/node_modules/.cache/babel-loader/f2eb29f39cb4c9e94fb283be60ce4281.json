{"ast":null,"code":"import React, { forwardRef, useState } from 'react';\nimport useStyles from './Thumb.styles.js';\nimport { Box } from '../../Box/Box.js';\nimport { Transition } from '../../Transition/Transition.js';\nconst Thumb = forwardRef((_ref, ref) => {\n  let {\n    max,\n    min,\n    value,\n    position,\n    label,\n    dragging,\n    onMouseDown,\n    color,\n    classNames,\n    styles,\n    size,\n    labelTransition,\n    labelTransitionDuration,\n    labelTransitionTimingFunction,\n    labelAlwaysOn,\n    thumbLabel,\n    onFocus,\n    onBlur,\n    showLabelOnHover,\n    children = null\n  } = _ref;\n  const {\n    classes,\n    cx,\n    theme\n  } = useStyles({\n    color,\n    size\n  }, {\n    classNames,\n    styles,\n    name: \"Slider\"\n  });\n  const [focused, setFocused] = useState(false);\n  const isVisible = labelAlwaysOn || dragging || focused || showLabelOnHover;\n  return /* @__PURE__ */React.createElement(Box, {\n    tabIndex: 0,\n    role: \"slider\",\n    \"aria-label\": thumbLabel,\n    \"aria-valuemax\": max,\n    \"aria-valuemin\": min,\n    \"aria-valuenow\": value,\n    ref,\n    className: cx(classes.thumb, {\n      [classes.dragging]: dragging\n    }),\n    onFocus: () => {\n      setFocused(true);\n      typeof onFocus === \"function\" && onFocus();\n    },\n    onBlur: () => {\n      setFocused(false);\n      typeof onBlur === \"function\" && onBlur();\n    },\n    onTouchStart: onMouseDown,\n    onMouseDown,\n    onClick: event => event.stopPropagation(),\n    sx: {\n      left: `${position}%`\n    }\n  }, children, /* @__PURE__ */React.createElement(Transition, {\n    mounted: label != null && isVisible,\n    duration: labelTransitionDuration,\n    transition: labelTransition,\n    timingFunction: labelTransitionTimingFunction || theme.transitionTimingFunction\n  }, transitionStyles => /* @__PURE__ */React.createElement(\"div\", {\n    style: transitionStyles,\n    className: classes.label\n  }, label)));\n});\nThumb.displayName = \"@mantine/core/SliderThumb\";\nexport { Thumb };","map":{"version":3,"mappings":";;;;AAIY,MAACA,KAAK,GAAGC,UAAU,CAAC,OAqB7BC,GArB6B,KAqBrB;AAAA,MArBsB;AAC/BC,OAD+B;AAE/BC,OAF+B;AAG/BC,SAH+B;AAI/BC,YAJ+B;AAK/BC,SAL+B;AAM/BC,YAN+B;AAO/BC,eAP+B;AAQ/BC,SAR+B;AAS/BC,cAT+B;AAU/BC,UAV+B;AAW/BC,QAX+B;AAY/BC,mBAZ+B;AAa/BC,2BAb+B;AAc/BC,iCAd+B;AAe/BC,iBAf+B;AAgB/BC,cAhB+B;AAiB/BC,WAjB+B;AAkB/BC,UAlB+B;AAmB/BC,oBAnB+B;AAoB/BC,YAAQ,GAAG;AApBoB,GAqBtB;AACT,QAAM;AAAEC,WAAF;AAAWC,MAAX;AAAeC;AAAf,MAAyBC,SAAS,CAAC;AAAEhB,SAAF;AAASG;AAAT,GAAD,EAAkB;AAAEF,cAAF;AAAcC,UAAd;AAAsBe,QAAI,EAAE;AAA5B,GAAlB,CAAxC;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBC,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAMC,SAAS,GAAGd,aAAa,IAAIT,QAAjB,IAA6BoB,OAA7B,IAAwCP,gBAA1D;AACA,wBAAuBW,KAAK,CAACC,aAAN,CAAoBC,GAApB,EAAyB;AAC9CC,YAAQ,EAAE,CADoC;AAE9CC,QAAI,EAAE,QAFwC;AAG9C,kBAAclB,UAHgC;AAI9C,qBAAiBf,GAJ6B;AAK9C,qBAAiBC,GAL6B;AAM9C,qBAAiBC,KAN6B;AAO9CH,OAP8C;AAQ9CmC,aAAS,EAAEb,EAAE,CAACD,OAAO,CAACe,KAAT,EAAgB;AAAE,OAACf,OAAO,CAACf,QAAT,GAAoBA;AAAtB,KAAhB,CARiC;AAS9CW,WAAO,EAAE,MAAM;AACbU,gBAAU,CAAC,IAAD,CAAV;AACA,aAAOV,OAAP,KAAmB,UAAnB,IAAiCA,OAAO,EAAxC;AACD,KAZ6C;AAa9CC,UAAM,EAAE,MAAM;AACZS,gBAAU,CAAC,KAAD,CAAV;AACA,aAAOT,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,EAAtC;AACD,KAhB6C;AAiB9CmB,gBAAY,EAAE9B,WAjBgC;AAkB9CA,eAlB8C;AAmB9C+B,WAAO,EAAGC,KAAD,IAAWA,KAAK,CAACC,eAAN,EAnB0B;AAoB9CC,MAAE,EAAE;AAAEC,UAAI,EAAG,GAAEtC,QAAS;AAApB;AApB0C,GAAzB,EAqBpBgB,QArBoB,EAqBZ,eAAkBU,KAAK,CAACC,aAAN,CAAoBY,UAApB,EAAgC;AAC3DC,WAAO,EAAEvC,KAAK,IAAI,IAAT,IAAiBwB,SADiC;AAE3DgB,YAAQ,EAAEhC,uBAFiD;AAG3DiC,cAAU,EAAElC,eAH+C;AAI3DmC,kBAAc,EAAEjC,6BAA6B,IAAIS,KAAK,CAACyB;AAJI,GAAhC,EAKzBC,gBAAD,IAAiB,eAAqBnB,KAAK,CAACC,aAAN,CAAoB,KAApB,EAA2B;AAClEmB,SAAK,EAAED,gBAD2D;AAElEd,aAAS,EAAEd,OAAO,CAAChB;AAF+C,GAA3B,EAGtCA,KAHsC,CALZ,CArBN,CAAvB;AA8BD,CAvD8B,CAAnB;AAwDZP,KAAK,CAACqD,WAAN,GAAoB,2BAApB","names":["Thumb","forwardRef","ref","max","min","value","position","label","dragging","onMouseDown","color","classNames","styles","size","labelTransition","labelTransitionDuration","labelTransitionTimingFunction","labelAlwaysOn","thumbLabel","onFocus","onBlur","showLabelOnHover","children","classes","cx","theme","useStyles","name","focused","setFocused","useState","isVisible","React","createElement","Box","tabIndex","role","className","thumb","onTouchStart","onClick","event","stopPropagation","sx","left","Transition","mounted","duration","transition","timingFunction","transitionTimingFunction","transitionStyles","style","displayName"],"sources":["/Users/marceloperez/node_modules/@mantine/core/src/components/Slider/Thumb/Thumb.tsx"],"sourcesContent":["import React, { useState, forwardRef } from 'react';\nimport { DefaultProps, MantineNumberSize, MantineColor, ClassNames } from '@mantine/styles';\nimport { Box } from '../../Box';\nimport { Transition, MantineTransition } from '../../Transition';\nimport useStyles from './Thumb.styles';\n\nexport type ThumbStylesNames = ClassNames<typeof useStyles>;\n\nexport interface ThumbProps extends DefaultProps<ThumbStylesNames> {\n  max: number;\n  min: number;\n  value: number;\n  position: number;\n  dragging: boolean;\n  color: MantineColor;\n  size: MantineNumberSize;\n  label: React.ReactNode;\n  onMouseDown(event: React.MouseEvent<HTMLDivElement> | React.TouchEvent<HTMLDivElement>): void;\n  labelTransition?: MantineTransition;\n  labelTransitionDuration?: number;\n  labelTransitionTimingFunction?: string;\n  labelAlwaysOn: boolean;\n  thumbLabel: string;\n  onFocus?(): void;\n  onBlur?(): void;\n  showLabelOnHover?: boolean;\n  children?: React.ReactNode;\n}\n\nexport const Thumb = forwardRef<HTMLDivElement, ThumbProps>(\n  (\n    {\n      max,\n      min,\n      value,\n      position,\n      label,\n      dragging,\n      onMouseDown,\n      color,\n      classNames,\n      styles,\n      size,\n      labelTransition,\n      labelTransitionDuration,\n      labelTransitionTimingFunction,\n      labelAlwaysOn,\n      thumbLabel,\n      onFocus,\n      onBlur,\n      showLabelOnHover,\n      children = null,\n    }: ThumbProps,\n    ref\n  ) => {\n    const { classes, cx, theme } = useStyles(\n      { color, size },\n      { classNames, styles, name: 'Slider' }\n    );\n    const [focused, setFocused] = useState(false);\n    const isVisible = labelAlwaysOn || dragging || focused || showLabelOnHover;\n\n    return (\n      <Box<'div'>\n        tabIndex={0}\n        role=\"slider\"\n        aria-label={thumbLabel}\n        aria-valuemax={max}\n        aria-valuemin={min}\n        aria-valuenow={value}\n        ref={ref}\n        className={cx(classes.thumb, { [classes.dragging]: dragging })}\n        onFocus={() => {\n          setFocused(true);\n          typeof onFocus === 'function' && onFocus();\n        }}\n        onBlur={() => {\n          setFocused(false);\n          typeof onBlur === 'function' && onBlur();\n        }}\n        onTouchStart={onMouseDown}\n        onMouseDown={onMouseDown}\n        onClick={(event) => event.stopPropagation()}\n        sx={{ left: `${position}%` }}\n      >\n        {children}\n        <Transition\n          mounted={label != null && isVisible}\n          duration={labelTransitionDuration}\n          transition={labelTransition}\n          timingFunction={labelTransitionTimingFunction || theme.transitionTimingFunction}\n        >\n          {(transitionStyles) => (\n            <div style={transitionStyles} className={classes.label}>\n              {label}\n            </div>\n          )}\n        </Transition>\n      </Box>\n    );\n  }\n);\n\nThumb.displayName = '@mantine/core/SliderThumb';\n"]},"metadata":{},"sourceType":"module"}