{"ast":null,"code":"import { useMemo } from 'react';\nimport { useUncontrolled } from '../use-uncontrolled/use-uncontrolled.js';\nimport { range } from '../utils/range/range.js';\nconst DOTS = \"dots\";\n\nfunction usePagination(_ref) {\n  let {\n    total,\n    siblings = 1,\n    boundaries = 1,\n    page,\n    initialPage = 1,\n    onChange\n  } = _ref;\n  const [activePage, setActivePage] = useUncontrolled({\n    value: page,\n    onChange,\n    defaultValue: initialPage,\n    finalValue: initialPage,\n    rule: _page => typeof _page === \"number\" && _page <= total\n  });\n\n  const setPage = pageNumber => {\n    if (pageNumber <= 0) {\n      setActivePage(1);\n    } else if (pageNumber > total) {\n      setActivePage(total);\n    } else {\n      setActivePage(pageNumber);\n    }\n  };\n\n  const next = () => setPage(activePage + 1);\n\n  const previous = () => setPage(activePage - 1);\n\n  const first = () => setPage(1);\n\n  const last = () => setPage(total);\n\n  const paginationRange = useMemo(() => {\n    const totalPageNumbers = siblings * 2 + 3 + boundaries * 2;\n\n    if (totalPageNumbers >= total) {\n      return range(1, total);\n    }\n\n    const leftSiblingIndex = Math.max(activePage - siblings, boundaries);\n    const rightSiblingIndex = Math.min(activePage + siblings, total - boundaries);\n    const shouldShowLeftDots = leftSiblingIndex > boundaries + 2;\n    const shouldShowRightDots = rightSiblingIndex < total - (boundaries + 1);\n\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      const leftItemCount = siblings * 2 + boundaries + 2;\n      return [...range(1, leftItemCount), DOTS, ...range(total - (boundaries - 1), total)];\n    }\n\n    if (shouldShowLeftDots && !shouldShowRightDots) {\n      const rightItemCount = boundaries + 1 + 2 * siblings;\n      return [...range(1, boundaries), DOTS, ...range(total - rightItemCount, total)];\n    }\n\n    return [...range(1, boundaries), DOTS, ...range(leftSiblingIndex, rightSiblingIndex), DOTS, ...range(total - boundaries + 1, total)];\n  }, [total, siblings, activePage]);\n  return {\n    range: paginationRange,\n    active: activePage,\n    setPage,\n    next,\n    previous,\n    first,\n    last\n  };\n}\n\nexport { DOTS, usePagination };","map":{"version":3,"mappings":"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","names":["DOTS","usePagination","total","siblings","boundaries","page","initialPage","onChange","activePage","setActivePage","useUncontrolled","value","defaultValue","finalValue","rule","_page","setPage","pageNumber","next","previous","first","last","paginationRange","useMemo","totalPageNumbers","range","leftSiblingIndex","Math","max","rightSiblingIndex","min","shouldShowLeftDots","shouldShowRightDots","leftItemCount","rightItemCount","active"],"sources":["/Users/marceloperez/node_modules/@mantine/hooks/src/use-pagination/use-pagination.ts"],"sourcesContent":["import { useMemo } from 'react';\nimport { useUncontrolled } from '../use-uncontrolled/use-uncontrolled';\nimport { range } from '../utils';\n\nexport const DOTS = 'dots';\n\nexport interface PaginationParams {\n  /** Page selected on initial render, defaults to 1 */\n  initialPage?: number;\n\n  /** Controlled active page number */\n  page?: number;\n\n  /** Total amount of pages */\n  total: number;\n\n  /** Siblings amount on left/right side of selected page, defaults to 1 */\n  siblings?: number;\n\n  /** Amount of elements visible on left/right edges, defaults to 1  */\n  boundaries?: number;\n\n  /** Callback fired after change of each page */\n  onChange?: (page: number) => void;\n}\n\nexport function usePagination({\n  total,\n  siblings = 1,\n  boundaries = 1,\n  page,\n  initialPage = 1,\n  onChange,\n}: PaginationParams) {\n  const [activePage, setActivePage] = useUncontrolled({\n    value: page,\n    onChange,\n    defaultValue: initialPage,\n    finalValue: initialPage,\n    rule: (_page) => typeof _page === 'number' && _page <= total,\n  });\n\n  const setPage = (pageNumber: number) => {\n    if (pageNumber <= 0) {\n      setActivePage(1);\n    } else if (pageNumber > total) {\n      setActivePage(total);\n    } else {\n      setActivePage(pageNumber);\n    }\n  };\n\n  const next = () => setPage(activePage + 1);\n  const previous = () => setPage(activePage - 1);\n  const first = () => setPage(1);\n  const last = () => setPage(total);\n\n  const paginationRange = useMemo((): (number | 'dots')[] => {\n    // Pages count is determined as siblings (left/right) + boundaries(left/right) + currentPage + 2*DOTS\n    const totalPageNumbers = siblings * 2 + 3 + boundaries * 2;\n\n    /*\n     * If the number of pages is less than the page numbers we want to show in our\n     * paginationComponent, we return the range [1..total]\n     */\n    if (totalPageNumbers >= total) {\n      return range(1, total);\n    }\n\n    const leftSiblingIndex = Math.max(activePage - siblings, boundaries);\n    const rightSiblingIndex = Math.min(activePage + siblings, total - boundaries);\n\n    /*\n     * We do not want to show dots if there is only one position left\n     * after/before the left/right page count as that would lead to a change if our Pagination\n     * component size which we do not want\n     */\n    const shouldShowLeftDots = leftSiblingIndex > boundaries + 2;\n    const shouldShowRightDots = rightSiblingIndex < total - (boundaries + 1);\n\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      const leftItemCount = siblings * 2 + boundaries + 2;\n      return [...range(1, leftItemCount), DOTS, ...range(total - (boundaries - 1), total)];\n    }\n\n    if (shouldShowLeftDots && !shouldShowRightDots) {\n      const rightItemCount = boundaries + 1 + 2 * siblings;\n      return [...range(1, boundaries), DOTS, ...range(total - rightItemCount, total)];\n    }\n\n    return [\n      ...range(1, boundaries),\n      DOTS,\n      ...range(leftSiblingIndex, rightSiblingIndex),\n      DOTS,\n      ...range(total - boundaries + 1, total),\n    ];\n  }, [total, siblings, activePage]);\n\n  return {\n    range: paginationRange,\n    active: activePage,\n    setPage,\n    next,\n    previous,\n    first,\n    last,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}