{"ast":null,"code":"import _slicedToArray from \"/Users/marceloperez/Documents/my-portfolio/my-portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nfunction round(number) {\n  var digits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var base = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Math.pow(10, digits);\n  return Math.round(base * number) / base;\n}\n\nfunction hslaToHsva(_ref) {\n  var h = _ref.h,\n      s = _ref.s,\n      l = _ref.l,\n      a = _ref.a;\n  var ss = s * ((l < 50 ? l : 100 - l) / 100);\n  return {\n    h: h,\n    s: ss > 0 ? 2 * ss / (l + ss) * 100 : 0,\n    v: l + ss,\n    a: a\n  };\n}\n\nvar angleUnits = {\n  grad: 360 / 400,\n  turn: 360,\n  rad: 360 / (Math.PI * 2)\n};\n\nfunction parseHue(value) {\n  var unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"deg\";\n  return Number(value) * (angleUnits[unit] || 1);\n}\n\nvar HSL_REGEXP = /hsla?\\(?\\s*(-?\\d*\\.?\\d+)(deg|rad|grad|turn)?[,\\s]+(-?\\d*\\.?\\d+)%?[,\\s]+(-?\\d*\\.?\\d+)%?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i;\n\nfunction parseHsla(color) {\n  var match = HSL_REGEXP.exec(color);\n\n  if (!match) {\n    return {\n      h: 0,\n      s: 0,\n      v: 0,\n      a: 1\n    };\n  }\n\n  return hslaToHsva({\n    h: parseHue(match[1], match[2]),\n    s: Number(match[3]),\n    l: Number(match[4]),\n    a: match[5] === void 0 ? 1 : Number(match[5]) / (match[6] ? 100 : 1)\n  });\n}\n\nfunction rgbaToHsva(_ref2) {\n  var r = _ref2.r,\n      g = _ref2.g,\n      b = _ref2.b,\n      a = _ref2.a;\n  var max = Math.max(r, g, b);\n  var delta = max - Math.min(r, g, b);\n  var hh = delta ? max === r ? (g - b) / delta : max === g ? 2 + (b - r) / delta : 4 + (r - g) / delta : 0;\n  return {\n    h: round(60 * (hh < 0 ? hh + 6 : hh)),\n    s: round(max ? delta / max * 100 : 0),\n    v: round(max / 255 * 100),\n    a: a\n  };\n}\n\nfunction parseHex(color) {\n  var hex = color[0] === \"#\" ? color.slice(1) : color;\n\n  if (hex.length === 3) {\n    return rgbaToHsva({\n      r: parseInt(hex[0] + hex[0], 16),\n      g: parseInt(hex[1] + hex[1], 16),\n      b: parseInt(hex[2] + hex[2], 16),\n      a: 1\n    });\n  }\n\n  return rgbaToHsva({\n    r: parseInt(hex.slice(0, 2), 16),\n    g: parseInt(hex.slice(2, 4), 16),\n    b: parseInt(hex.slice(4, 6), 16),\n    a: 1\n  });\n}\n\nvar RGB_REGEXP = /rgba?\\(?\\s*(-?\\d*\\.?\\d+)(%)?[,\\s]+(-?\\d*\\.?\\d+)(%)?[,\\s]+(-?\\d*\\.?\\d+)(%)?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i;\n\nfunction parseRgba(color) {\n  var match = RGB_REGEXP.exec(color);\n\n  if (!match) {\n    return {\n      h: 0,\n      s: 0,\n      v: 0,\n      a: 1\n    };\n  }\n\n  return rgbaToHsva({\n    r: Number(match[1]) / (match[2] ? 100 / 255 : 1),\n    g: Number(match[3]) / (match[4] ? 100 / 255 : 1),\n    b: Number(match[5]) / (match[6] ? 100 / 255 : 1),\n    a: match[7] === void 0 ? 1 : Number(match[7]) / (match[8] ? 100 : 1)\n  });\n}\n\nvar VALIDATION_REGEXP = {\n  hex: /^#?([0-9A-F]{3}){1,2}$/i,\n  rgb: /^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/i,\n  rgba: /^rgba\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/i,\n  hsl: /hsl\\(\\s*(\\d+)\\s*,\\s*(\\d+(?:\\.\\d+)?%)\\s*,\\s*(\\d+(?:\\.\\d+)?%)\\)/i,\n  hsla: /^hsla\\((\\d+),\\s*([\\d.]+)%,\\s*([\\d.]+)%,\\s*(\\d*(?:\\.\\d+)?)\\)$/i\n};\nvar CONVERTERS = {\n  hex: parseHex,\n  rgb: parseRgba,\n  rgba: parseRgba,\n  hsl: parseHsla,\n  hsla: parseHsla\n};\n\nfunction isColorValid(color) {\n  for (var _i = 0, _Object$entries = Object.entries(VALIDATION_REGEXP); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n        regexp = _Object$entries$_i[1];\n\n    if (regexp.test(color)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction parseColor(color) {\n  if (typeof color !== \"string\") {\n    return {\n      h: 0,\n      s: 0,\n      v: 0,\n      a: 1\n    };\n  }\n\n  if (color === \"transparent\") {\n    return {\n      h: 0,\n      s: 0,\n      v: 0,\n      a: 0\n    };\n  }\n\n  var trimmed = color.trim();\n\n  for (var _i2 = 0, _Object$entries2 = Object.entries(VALIDATION_REGEXP); _i2 < _Object$entries2.length; _i2++) {\n    var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),\n        rule = _Object$entries2$_i[0],\n        regexp = _Object$entries2$_i[1];\n\n    if (regexp.test(trimmed)) {\n      return CONVERTERS[rule](trimmed);\n    }\n  }\n\n  return {\n    h: 0,\n    s: 0,\n    v: 0,\n    a: 1\n  };\n}\n\nexport { isColorValid, parseColor, parseHex, parseHsla, parseHue, parseRgba, round };","map":{"version":3,"mappings":"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","names":["round","number","digits","base","Math","hslaToHsva","h","s","l","a","ss","v","angleUnits","grad","turn","rad","PI","parseHue","value","unit","Number","HSL_REGEXP","parseHsla","color","match","exec","rgbaToHsva","r","g","b","max","delta","min","hh","parseHex","hex","slice","length","parseInt","RGB_REGEXP","parseRgba","VALIDATION_REGEXP","rgb","rgba","hsl","hsla","CONVERTERS","isColorValid","Object","entries","regexp","test","parseColor","trimmed","trim","rule"],"sources":["/Users/marceloperez/node_modules/@mantine/core/src/components/ColorPicker/converters/parsers.ts"],"sourcesContent":["import { HsvaColor, RgbaColor, ColorFormat } from '../types';\n\nexport function round(number: number, digits = 0, base = 10 ** digits) {\n  return Math.round(base * number) / base;\n}\n\nfunction hslaToHsva({ h, s, l, a }): HsvaColor {\n  const ss = s * ((l < 50 ? l : 100 - l) / 100);\n\n  return {\n    h,\n    s: ss > 0 ? ((2 * ss) / (l + ss)) * 100 : 0,\n    v: l + ss,\n    a,\n  };\n}\n\nconst angleUnits: Record<string, number> = {\n  grad: 360 / 400,\n  turn: 360,\n  rad: 360 / (Math.PI * 2),\n};\n\nexport function parseHue(value: string, unit = 'deg') {\n  return Number(value) * (angleUnits[unit] || 1);\n}\n\nconst HSL_REGEXP =\n  /hsla?\\(?\\s*(-?\\d*\\.?\\d+)(deg|rad|grad|turn)?[,\\s]+(-?\\d*\\.?\\d+)%?[,\\s]+(-?\\d*\\.?\\d+)%?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i;\n\nexport function parseHsla(color: string): HsvaColor {\n  const match = HSL_REGEXP.exec(color);\n\n  if (!match) {\n    return { h: 0, s: 0, v: 0, a: 1 };\n  }\n\n  return hslaToHsva({\n    h: parseHue(match[1], match[2]),\n    s: Number(match[3]),\n    l: Number(match[4]),\n    a: match[5] === undefined ? 1 : Number(match[5]) / (match[6] ? 100 : 1),\n  });\n}\n\nfunction rgbaToHsva({ r, g, b, a }: RgbaColor): HsvaColor {\n  const max = Math.max(r, g, b);\n  const delta = max - Math.min(r, g, b);\n\n  const hh = delta\n    ? max === r\n      ? (g - b) / delta\n      : max === g\n      ? 2 + (b - r) / delta\n      : 4 + (r - g) / delta\n    : 0;\n\n  return {\n    h: round(60 * (hh < 0 ? hh + 6 : hh)),\n    s: round(max ? (delta / max) * 100 : 0),\n    v: round((max / 255) * 100),\n    a,\n  };\n}\n\nexport function parseHex(color: string): HsvaColor {\n  const hex = color[0] === '#' ? color.slice(1) : color;\n\n  if (hex.length === 3) {\n    return rgbaToHsva({\n      r: parseInt(hex[0] + hex[0], 16),\n      g: parseInt(hex[1] + hex[1], 16),\n      b: parseInt(hex[2] + hex[2], 16),\n      a: 1,\n    });\n  }\n\n  return rgbaToHsva({\n    r: parseInt(hex.slice(0, 2), 16),\n    g: parseInt(hex.slice(2, 4), 16),\n    b: parseInt(hex.slice(4, 6), 16),\n    a: 1,\n  });\n}\n\nconst RGB_REGEXP =\n  /rgba?\\(?\\s*(-?\\d*\\.?\\d+)(%)?[,\\s]+(-?\\d*\\.?\\d+)(%)?[,\\s]+(-?\\d*\\.?\\d+)(%)?,?\\s*[/\\s]*(-?\\d*\\.?\\d+)?(%)?\\s*\\)?/i;\n\nexport function parseRgba(color: string): HsvaColor {\n  const match = RGB_REGEXP.exec(color);\n\n  if (!match) {\n    return { h: 0, s: 0, v: 0, a: 1 };\n  }\n\n  return rgbaToHsva({\n    r: Number(match[1]) / (match[2] ? 100 / 255 : 1),\n    g: Number(match[3]) / (match[4] ? 100 / 255 : 1),\n    b: Number(match[5]) / (match[6] ? 100 / 255 : 1),\n    a: match[7] === undefined ? 1 : Number(match[7]) / (match[8] ? 100 : 1),\n  });\n}\n\nconst VALIDATION_REGEXP: Record<ColorFormat, RegExp> = {\n  hex: /^#?([0-9A-F]{3}){1,2}$/i,\n  rgb: /^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/i,\n  rgba: /^rgba\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/i,\n  hsl: /hsl\\(\\s*(\\d+)\\s*,\\s*(\\d+(?:\\.\\d+)?%)\\s*,\\s*(\\d+(?:\\.\\d+)?%)\\)/i,\n  hsla: /^hsla\\((\\d+),\\s*([\\d.]+)%,\\s*([\\d.]+)%,\\s*(\\d*(?:\\.\\d+)?)\\)$/i,\n};\n\nconst CONVERTERS: Record<ColorFormat, (color: string) => HsvaColor> = {\n  hex: parseHex,\n  rgb: parseRgba,\n  rgba: parseRgba,\n  hsl: parseHsla,\n  hsla: parseHsla,\n};\n\nexport function isColorValid(color: string) {\n  // eslint-disable-next-line no-restricted-syntax\n  for (const [, regexp] of Object.entries(VALIDATION_REGEXP)) {\n    if (regexp.test(color)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport function parseColor(color: string): HsvaColor {\n  if (typeof color !== 'string') {\n    return { h: 0, s: 0, v: 0, a: 1 };\n  }\n\n  if (color === 'transparent') {\n    return { h: 0, s: 0, v: 0, a: 0 };\n  }\n\n  const trimmed = color.trim();\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const [rule, regexp] of Object.entries(VALIDATION_REGEXP)) {\n    if (regexp.test(trimmed)) {\n      return CONVERTERS[rule](trimmed);\n    }\n  }\n\n  return { h: 0, s: 0, v: 0, a: 1 };\n}\n"]},"metadata":{},"sourceType":"module"}