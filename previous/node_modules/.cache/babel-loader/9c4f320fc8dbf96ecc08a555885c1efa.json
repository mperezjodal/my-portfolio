{"ast":null,"code":"import _slicedToArray from \"/Users/marceloperez/Documents/my-portfolio/my-portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useState } from 'react';\n\nfunction useToggle(initialValue, options) {\n  var _useState = useState(initialValue),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var toggle = function toggle(value) {\n    if (typeof value !== \"undefined\") {\n      setState(value);\n    } else {\n      setState(function (current) {\n        if (current === options[0]) {\n          return options[1];\n        }\n\n        return options[0];\n      });\n    }\n  };\n\n  return [state, toggle];\n}\n\nfunction useBooleanToggle() {\n  var initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  return useToggle(initialValue, [true, false]);\n}\n\nexport { useBooleanToggle, useToggle };","map":{"version":3,"mappings":";;;AACO,SAASA,SAAT,CAAmBC,YAAnB,EAAiCC,OAAjC,EAA0C;AAC/C,kBAA0BC,QAAQ,CAACF,YAAD,CAAlC;AAAA;AAAA,MAAOG,KAAP;AAAA,MAAcC,QAAd;;AACA,MAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD,EAAW;AACxB,QAAI,OAAOA,KAAP,KAAiB,WAArB,EAAkC;AAChCF,cAAQ,CAACE,KAAD,CAAR;AACD,KAFD,MAEO;AACLF,cAAQ,CAAC,UAACG,OAAD,EAAa;AACpB,YAAIA,OAAO,KAAKN,OAAO,CAAC,CAAD,CAAvB,EAA4B;AAC1B,iBAAOA,OAAO,CAAC,CAAD,CAAd;AACD;;AACD,eAAOA,OAAO,CAAC,CAAD,CAAd;AACD,OALO,CAAR;AAMD;AACF,GAXD;;AAYA,SAAO,CAACE,KAAD,EAAQE,MAAR,CAAP;AACD;;AACM,SAASG,gBAAT,GAAgD;AAAA,MAAtBR,YAAsB,uEAAP,KAAO;AACrD,SAAOD,SAAS,CAACC,YAAD,EAAe,CAAC,IAAD,EAAO,KAAP,CAAf,CAAhB;AACF","names":["useToggle","initialValue","options","useState","state","setState","toggle","value","current","useBooleanToggle"],"sources":["/Users/marceloperez/node_modules/@mantine/hooks/src/use-toggle/use-toggle.ts"],"sourcesContent":["import { useState } from 'react';\n\nexport function useToggle<T>(initialValue: T, options: [T, T]) {\n  const [state, setState] = useState(initialValue);\n\n  const toggle = (value?: React.SetStateAction<T>) => {\n    if (typeof value !== 'undefined') {\n      setState(value);\n    } else {\n      setState((current) => {\n        if (current === options[0]) {\n          return options[1];\n        }\n\n        return options[0];\n      });\n    }\n  };\n\n  return [state, toggle] as const;\n}\n\nexport function useBooleanToggle(initialValue = false) {\n  return useToggle(initialValue, [true, false]);\n}\n"]},"metadata":{},"sourceType":"module"}