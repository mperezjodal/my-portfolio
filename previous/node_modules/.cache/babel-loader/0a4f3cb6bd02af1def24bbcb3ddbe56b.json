{"ast":null,"code":"import _slicedToArray from \"/Users/marceloperez/Documents/my-portfolio/my-portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useState, useRef } from 'react';\n\nfunction useInterval(fn, interval) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      active = _useState2[0],\n      setActive = _useState2[1];\n\n  var intervalRef = useRef();\n\n  var start = function start() {\n    if (!active) {\n      setActive(true);\n      intervalRef.current = window.setInterval(fn, interval);\n    }\n  };\n\n  var stop = function stop() {\n    setActive(false);\n    window.clearInterval(intervalRef.current);\n  };\n\n  var toggle = function toggle() {\n    if (active) {\n      stop();\n    } else {\n      start();\n    }\n  };\n\n  return {\n    start: start,\n    stop: stop,\n    toggle: toggle,\n    active: active\n  };\n}\n\nexport { useInterval };","map":{"version":3,"mappings":";;;AACO,SAASA,WAAT,CAAqBC,EAArB,EAAyBC,QAAzB,EAAmC;AACxC,kBAA4BC,QAAQ,CAAC,KAAD,CAApC;AAAA;AAAA,MAAOC,MAAP;AAAA,MAAeC,SAAf;;AACA,MAAMC,WAAW,GAAGC,MAAM,EAA1B;;AACA,MAAMC,KAAK,GAAG,SAARA,KAAQ,GAAM;AAClB,QAAI,CAACJ,MAAL,EAAa;AACXC,eAAS,CAAC,IAAD,CAAT;AACAC,iBAAW,CAACG,OAAZ,GAAsBC,MAAM,CAACC,WAAP,CAAmBV,EAAnB,EAAuBC,QAAvB,CAAtB;AACD;AACF,GALD;;AAMA,MAAMU,IAAI,GAAG,SAAPA,IAAO,GAAM;AACjBP,aAAS,CAAC,KAAD,CAAT;AACAK,UAAM,CAACG,aAAP,CAAqBP,WAAW,CAACG,OAAjC;AACD,GAHD;;AAIA,MAAMK,MAAM,GAAG,SAATA,MAAS,GAAM;AACnB,QAAIV,MAAJ,EAAY;AACVQ,UAAI;AACL,KAFD,MAEO;AACLJ,WAAK;AACN;AACF,GAND;;AAOA,SAAO;AAAEA,SAAK,EAALA,KAAF;AAASI,QAAI,EAAJA,IAAT;AAAeE,UAAM,EAANA,MAAf;AAAuBV,UAAM,EAANA;AAAvB,GAAP;AACF","names":["useInterval","fn","interval","useState","active","setActive","intervalRef","useRef","start","current","window","setInterval","stop","clearInterval","toggle"],"sources":["/Users/marceloperez/node_modules/@mantine/hooks/src/use-interval/use-interval.ts"],"sourcesContent":["import { useRef, useState } from 'react';\n\nexport function useInterval(fn: () => void, interval: number) {\n  const [active, setActive] = useState(false);\n  const intervalRef = useRef<number>();\n\n  const start = () => {\n    if (!active) {\n      setActive(true);\n      intervalRef.current = window.setInterval(fn, interval);\n    }\n  };\n\n  const stop = () => {\n    setActive(false);\n    window.clearInterval(intervalRef.current);\n  };\n\n  const toggle = () => {\n    if (active) {\n      stop();\n    } else {\n      start();\n    }\n  };\n\n  return { start, stop, toggle, active };\n}\n"]},"metadata":{},"sourceType":"module"}