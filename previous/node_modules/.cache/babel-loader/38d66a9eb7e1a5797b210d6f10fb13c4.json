{"ast":null,"code":"import { useState } from 'react';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nfunction useListState() {\n  let initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  const [state, setState] = useState(initialValue);\n\n  const append = function () {\n    for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {\n      items[_key] = arguments[_key];\n    }\n\n    return setState(current => [...current, ...items]);\n  };\n\n  const prepend = function () {\n    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      items[_key2] = arguments[_key2];\n    }\n\n    return setState(current => [...items, ...current]);\n  };\n\n  const insert = function (index) {\n    for (var _len3 = arguments.length, items = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      items[_key3 - 1] = arguments[_key3];\n    }\n\n    return setState(current => [...current.slice(0, index), ...items, ...current.slice(index)]);\n  };\n\n  const apply = fn => setState(current => current.map((item, index) => fn(item, index)));\n\n  const remove = function () {\n    for (var _len4 = arguments.length, indices = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      indices[_key4] = arguments[_key4];\n    }\n\n    return setState(current => current.filter((_, index) => !indices.includes(index)));\n  };\n\n  const pop = () => setState(current => {\n    const cloned = [...current];\n    cloned.pop();\n    return cloned;\n  });\n\n  const shift = () => setState(current => {\n    const cloned = [...current];\n    cloned.shift();\n    return cloned;\n  });\n\n  const reorder = _ref => {\n    let {\n      from,\n      to\n    } = _ref;\n    return setState(current => {\n      const cloned = [...current];\n      const item = current[from];\n      cloned.splice(from, 1);\n      cloned.splice(to, 0, item);\n      return cloned;\n    });\n  };\n\n  const setItem = (index, item) => setState(current => {\n    const cloned = [...current];\n    cloned[index] = item;\n    return cloned;\n  });\n\n  const setItemProp = (index, prop, value) => setState(current => {\n    const cloned = [...current];\n    cloned[index] = __spreadProps(__spreadValues({}, cloned[index]), {\n      [prop]: value\n    });\n    return cloned;\n  });\n\n  const applyWhere = (condition, fn) => setState(current => current.map(item => condition(item) ? fn(item) : item));\n\n  return [state, {\n    setState,\n    append,\n    prepend,\n    insert,\n    pop,\n    shift,\n    apply,\n    applyWhere,\n    remove,\n    reorder,\n    setItem,\n    setItemProp\n  }];\n}\n\nexport { useListState };","map":{"version":3,"mappings":"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","names":["__defProp","Object","defineProperty","__defProps","defineProperties","__getOwnPropDescs","getOwnPropertyDescriptors","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","key","value","enumerable","configurable","writable","__spreadValues","a","b","prop","call","__spreadProps","useListState","initialValue","state","setState","useState","append","items","current","prepend","insert","index","slice","apply","fn","map","item","remove","indices","filter","_","includes","pop","cloned","shift","reorder","from","to","splice","setItem","setItemProp","applyWhere","condition"],"sources":["/Users/marceloperez/node_modules/@mantine/hooks/src/use-list-state/use-list-state.ts"],"sourcesContent":["import React, { useState } from 'react';\n\nexport interface UseListStateHandler<T> {\n  setState: React.Dispatch<React.SetStateAction<T[]>>;\n  append: (...items: T[]) => void;\n  prepend: (...items: T[]) => void;\n  insert: (index: number, ...items: T[]) => void;\n  pop: () => void;\n  shift: () => void;\n  apply: (fn: (item: T, index?: number) => T) => void;\n  applyWhere: (\n    condition: (item: T, index?: number) => boolean,\n    fn: (item: T, index?: number) => T\n  ) => void;\n  remove: (...indices: number[]) => void;\n  reorder: ({ from, to }: { from: number; to: number }) => void;\n  setItem: (index: number, item: T) => void;\n  setItemProp: <K extends keyof T, U extends T[K]>(index: number, prop: K, value: U) => void;\n}\n\nexport type UseListState<T> = [T[], UseListStateHandler<T>];\n\nexport function useListState<T>(initialValue: T[] = []): UseListState<T> {\n  const [state, setState] = useState(initialValue);\n\n  const append = (...items: T[]) => setState((current) => [...current, ...items]);\n  const prepend = (...items: T[]) => setState((current) => [...items, ...current]);\n\n  const insert = (index: number, ...items: T[]) =>\n    setState((current) => [...current.slice(0, index), ...items, ...current.slice(index)]);\n\n  const apply = (fn: (item: T, index?: number) => T) =>\n    setState((current) => current.map((item, index) => fn(item, index)));\n\n  const remove = (...indices: number[]) =>\n    setState((current) => current.filter((_, index) => !indices.includes(index)));\n\n  const pop = () =>\n    setState((current) => {\n      const cloned = [...current];\n      cloned.pop();\n      return cloned;\n    });\n\n  const shift = () =>\n    setState((current) => {\n      const cloned = [...current];\n      cloned.shift();\n      return cloned;\n    });\n\n  const reorder = ({ from, to }: { from: number; to: number }) =>\n    setState((current) => {\n      const cloned = [...current];\n      const item = current[from];\n\n      cloned.splice(from, 1);\n      cloned.splice(to, 0, item);\n\n      return cloned;\n    });\n\n  const setItem = (index: number, item: T) =>\n    setState((current) => {\n      const cloned = [...current];\n      cloned[index] = item;\n      return cloned;\n    });\n\n  const setItemProp = <K extends keyof T, U extends T[K]>(index: number, prop: K, value: U) =>\n    setState((current) => {\n      const cloned = [...current];\n      cloned[index] = { ...cloned[index], [prop]: value };\n      return cloned;\n    });\n\n  const applyWhere = (\n    condition: (item: T, index?: number) => boolean,\n    fn: (item: T, index?: number) => T\n  ) => setState((current) => current.map((item) => (condition(item) ? fn(item) : item)));\n\n  return [\n    state,\n    {\n      setState,\n      append,\n      prepend,\n      insert,\n      pop,\n      shift,\n      apply,\n      applyWhere,\n      remove,\n      reorder,\n      setItem,\n      setItemProp,\n    },\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}