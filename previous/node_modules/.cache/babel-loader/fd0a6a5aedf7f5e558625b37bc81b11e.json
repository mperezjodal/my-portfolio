{"ast":null,"code":"import { useState } from 'react';\n\nfunction useQueue(_ref) {\n  let {\n    initialValues = [],\n    limit\n  } = _ref;\n  const [{\n    state,\n    queue\n  }, setState] = useState({\n    state: initialValues.slice(0, limit),\n    queue: initialValues.slice(limit)\n  });\n\n  const add = function () {\n    for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {\n      items[_key] = arguments[_key];\n    }\n\n    return setState(current => {\n      const results = [...current.state, ...current.queue, ...items];\n      return {\n        state: results.slice(0, limit),\n        queue: results.slice(limit)\n      };\n    });\n  };\n\n  const update = fn => setState(current => {\n    const results = fn([...current.state, ...current.queue]);\n    return {\n      state: results.slice(0, limit),\n      queue: results.slice(limit)\n    };\n  });\n\n  const cleanQueue = () => setState(current => ({\n    state: current.state,\n    queue: []\n  }));\n\n  return {\n    state,\n    queue,\n    add,\n    update,\n    cleanQueue\n  };\n}\n\nexport { useQueue };","map":{"version":3,"mappings":";;AACO,SAASA,QAAT,OAAiD;AAAA,MAA/B;AAAEC,iBAAa,GAAG,EAAlB;AAAsBC;AAAtB,GAA+B;AACtD,QAAM,CAAC;AAAEC,SAAF;AAASC;AAAT,GAAD,EAAmBC,QAAnB,IAA+BC,QAAQ,CAAC;AAC5CH,SAAK,EAAEF,aAAa,CAACM,KAAd,CAAoB,CAApB,EAAuBL,KAAvB,CADqC;AAE5CE,SAAK,EAAEH,aAAa,CAACM,KAAd,CAAoBL,KAApB;AAFqC,GAAD,CAA7C;;AAIA,QAAMM,GAAG,GAAG;AAAA,sCAAIC,KAAJ;AAAIA,WAAJ;AAAA;;AAAA,WAAcJ,QAAQ,CAAEK,OAAD,IAAa;AAC9C,YAAMC,OAAO,GAAG,CAAC,GAAGD,OAAO,CAACP,KAAZ,EAAmB,GAAGO,OAAO,CAACN,KAA9B,EAAqC,GAAGK,KAAxC,CAAhB;AACA,aAAO;AACLN,aAAK,EAAEQ,OAAO,CAACJ,KAAR,CAAc,CAAd,EAAiBL,KAAjB,CADF;AAELE,aAAK,EAAEO,OAAO,CAACJ,KAAR,CAAcL,KAAd;AAFF,OAAP;AAID,KANiC,CAAtB;AAAA,GAAZ;;AAOA,QAAMU,MAAM,GAAIC,EAAD,IAAQR,QAAQ,CAAEK,OAAD,IAAa;AAC3C,UAAMC,OAAO,GAAGE,EAAE,CAAC,CAAC,GAAGH,OAAO,CAACP,KAAZ,EAAmB,GAAGO,OAAO,CAACN,KAA9B,CAAD,CAAlB;AACA,WAAO;AACLD,WAAK,EAAEQ,OAAO,CAACJ,KAAR,CAAc,CAAd,EAAiBL,KAAjB,CADF;AAELE,WAAK,EAAEO,OAAO,CAACJ,KAAR,CAAcL,KAAd;AAFF,KAAP;AAID,GAN8B,CAA/B;;AAOA,QAAMY,UAAU,GAAG,MAAMT,QAAQ,CAAEK,OAAD,KAAc;AAAEP,SAAK,EAAEO,OAAO,CAACP,KAAjB;AAAwBC,SAAK,EAAE;AAA/B,GAAd,CAAD,CAAjC;;AACA,SAAO;AACLD,SADK;AAELC,SAFK;AAGLI,OAHK;AAILI,UAJK;AAKLE;AALK,GAAP;AAOF","names":["useQueue","initialValues","limit","state","queue","setState","useState","slice","add","items","current","results","update","fn","cleanQueue"],"sources":["/Users/marceloperez/node_modules/@mantine/hooks/src/use-queue/use-queue.ts"],"sourcesContent":["import { useState } from 'react';\n\nexport function useQueue<T>({ initialValues = [], limit }: { initialValues?: T[]; limit: number }) {\n  const [{ state, queue }, setState] = useState({\n    state: initialValues.slice(0, limit),\n    queue: initialValues.slice(limit),\n  });\n\n  const add = (...items: T[]) =>\n    setState((current) => {\n      const results = [...current.state, ...current.queue, ...items];\n\n      return {\n        state: results.slice(0, limit),\n        queue: results.slice(limit),\n      };\n    });\n\n  const update = (fn: (state: T[]) => T[]) =>\n    setState((current) => {\n      const results = fn([...current.state, ...current.queue]);\n\n      return {\n        state: results.slice(0, limit),\n        queue: results.slice(limit),\n      };\n    });\n\n  const cleanQueue = () => setState((current) => ({ state: current.state, queue: [] }));\n\n  return {\n    state,\n    queue,\n    add,\n    update,\n    cleanQueue,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}