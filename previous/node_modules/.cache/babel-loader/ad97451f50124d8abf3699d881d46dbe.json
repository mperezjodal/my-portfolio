{"ast":null,"code":"import _slicedToArray from \"/Users/marceloperez/Documents/my-portfolio/my-portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useRef, useState, useMemo, useEffect } from 'react';\nvar defaultState = {\n  x: 0,\n  y: 0,\n  width: 0,\n  height: 0,\n  top: 0,\n  left: 0,\n  bottom: 0,\n  right: 0\n};\nvar browser = typeof window !== \"undefined\";\n\nfunction useResizeObserver() {\n  var frameID = useRef(0);\n  var ref = useRef(null);\n\n  var _useState = useState(defaultState),\n      _useState2 = _slicedToArray(_useState, 2),\n      rect = _useState2[0],\n      setRect = _useState2[1];\n\n  var observer = useMemo(function () {\n    return browser ? new ResizeObserver(function (entries) {\n      var entry = entries[0];\n\n      if (entry) {\n        cancelAnimationFrame(frameID.current);\n        frameID.current = requestAnimationFrame(function () {\n          if (ref.current) {\n            setRect(entry.contentRect);\n          }\n        });\n      }\n    }) : null;\n  }, []);\n  useEffect(function () {\n    if (ref.current) {\n      observer.observe(ref.current);\n    }\n\n    return function () {\n      observer.disconnect();\n\n      if (frameID.current) {\n        cancelAnimationFrame(frameID.current);\n      }\n    };\n  }, [ref.current]);\n  return [ref, rect];\n}\n\nfunction useElementSize() {\n  var _useResizeObserver = useResizeObserver(),\n      _useResizeObserver2 = _slicedToArray(_useResizeObserver, 2),\n      ref = _useResizeObserver2[0],\n      _useResizeObserver2$ = _useResizeObserver2[1],\n      width = _useResizeObserver2$.width,\n      height = _useResizeObserver2$.height;\n\n  return {\n    ref: ref,\n    width: width,\n    height: height\n  };\n}\n\nexport { useElementSize, useResizeObserver };","map":{"version":3,"mappings":";;AACA,IAAMA,YAAY,GAAG;AACnBC,GAAC,EAAE,CADgB;AAEnBC,GAAC,EAAE,CAFgB;AAGnBC,OAAK,EAAE,CAHY;AAInBC,QAAM,EAAE,CAJW;AAKnBC,KAAG,EAAE,CALc;AAMnBC,MAAI,EAAE,CANa;AAOnBC,QAAM,EAAE,CAPW;AAQnBC,OAAK,EAAE;AARY,CAArB;AAUA,IAAMC,OAAO,GAAG,OAAOC,MAAP,KAAkB,WAAlC;;AACO,SAASC,iBAAT,GAA6B;AAClC,MAAMC,OAAO,GAAGC,MAAM,CAAC,CAAD,CAAtB;AACA,MAAMC,GAAG,GAAGD,MAAM,CAAC,IAAD,CAAlB;;AACA,kBAAwBE,QAAQ,CAACf,YAAD,CAAhC;AAAA;AAAA,MAAOgB,IAAP;AAAA,MAAaC,OAAb;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC;AAAA,WAAMV,OAAO,GAAG,IAAIW,cAAJ,CAAmB,UAACC,OAAD,EAAa;AACvE,UAAMC,KAAK,GAAGD,OAAO,CAAC,CAAD,CAArB;;AACA,UAAIC,KAAJ,EAAW;AACTC,4BAAoB,CAACX,OAAO,CAACY,OAAT,CAApB;AACAZ,eAAO,CAACY,OAAR,GAAkBC,qBAAqB,CAAC,YAAM;AAC5C,cAAIX,GAAG,CAACU,OAAR,EAAiB;AACfP,mBAAO,CAACK,KAAK,CAACI,WAAP,CAAP;AACD;AACF,SAJsC,CAAvC;AAKD;AACF,KAVwC,CAAH,GAUjC,IAVoB;AAAA,GAAD,EAUb,EAVa,CAAxB;AAWAC,WAAS,CAAC,YAAM;AACd,QAAIb,GAAG,CAACU,OAAR,EAAiB;AACfN,cAAQ,CAACU,OAAT,CAAiBd,GAAG,CAACU,OAArB;AACD;;AACD,WAAO,YAAM;AACXN,cAAQ,CAACW,UAAT;;AACA,UAAIjB,OAAO,CAACY,OAAZ,EAAqB;AACnBD,4BAAoB,CAACX,OAAO,CAACY,OAAT,CAApB;AACD;AACF,KALD;AAMD,GAVQ,EAUN,CAACV,GAAG,CAACU,OAAL,CAVM,CAAT;AAWA,SAAO,CAACV,GAAD,EAAME,IAAN,CAAP;AACD;;AACM,SAASc,cAAT,GAA0B;AAC/B,2BAAiCnB,iBAAiB,EAAlD;AAAA;AAAA,MAAOG,GAAP;AAAA;AAAA,MAAcX,KAAd,wBAAcA,KAAd;AAAA,MAAqBC,MAArB,wBAAqBA,MAArB;;AACA,SAAO;AAAEU,OAAG,EAAHA,GAAF;AAAOX,SAAK,EAALA,KAAP;AAAcC,UAAM,EAANA;AAAd,GAAP;AACF","names":["defaultState","x","y","width","height","top","left","bottom","right","browser","window","useResizeObserver","frameID","useRef","ref","useState","rect","setRect","observer","useMemo","ResizeObserver","entries","entry","cancelAnimationFrame","current","requestAnimationFrame","contentRect","useEffect","observe","disconnect","useElementSize"],"sources":["/Users/marceloperez/node_modules/@mantine/hooks/src/use-resize-observer/use-resize-observer.ts"],"sourcesContent":["import { useEffect, useMemo, useRef, useState } from 'react';\n\ntype ObserverRect = Omit<DOMRectReadOnly, 'toJSON'>;\n\nconst defaultState: ObserverRect = {\n  x: 0,\n  y: 0,\n  width: 0,\n  height: 0,\n  top: 0,\n  left: 0,\n  bottom: 0,\n  right: 0,\n};\n\nconst browser = typeof window !== 'undefined';\n\nexport function useResizeObserver<T extends HTMLElement = any>() {\n  const frameID = useRef(0);\n  const ref = useRef<T>(null);\n\n  const [rect, setRect] = useState<ObserverRect>(defaultState);\n\n  const observer = useMemo(\n    () =>\n      browser\n        ? new ResizeObserver((entries: any) => {\n            const entry = entries[0];\n\n            if (entry) {\n              cancelAnimationFrame(frameID.current);\n\n              frameID.current = requestAnimationFrame(() => {\n                if (ref.current) {\n                  setRect(entry.contentRect);\n                }\n              });\n            }\n          })\n        : null,\n    []\n  );\n\n  useEffect(() => {\n    if (ref.current) {\n      observer.observe(ref.current);\n    }\n\n    return () => {\n      observer.disconnect();\n\n      if (frameID.current) {\n        cancelAnimationFrame(frameID.current);\n      }\n    };\n  }, [ref.current]);\n\n  return [ref, rect] as const;\n}\n\nexport function useElementSize<T extends HTMLElement = any>() {\n  const [ref, { width, height }] = useResizeObserver<T>();\n  return { ref, width, height };\n}\n"]},"metadata":{},"sourceType":"module"}