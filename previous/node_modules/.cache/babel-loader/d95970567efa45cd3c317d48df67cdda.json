{"ast":null,"code":"import _slicedToArray from \"/Users/marceloperez/Documents/my-portfolio/my-portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useState } from 'react';\n\nfunction useClipboard() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$timeout = _ref.timeout,\n      timeout = _ref$timeout === void 0 ? 2e3 : _ref$timeout;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      copied = _useState4[0],\n      setCopied = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      copyTimeout = _useState6[0],\n      setCopyTimeout = _useState6[1];\n\n  var handleCopyResult = function handleCopyResult(value) {\n    clearTimeout(copyTimeout);\n    setCopyTimeout(setTimeout(function () {\n      return setCopied(false);\n    }, timeout));\n    setCopied(value);\n  };\n\n  var copy = function copy(valueToCopy) {\n    if (\"clipboard\" in navigator) {\n      navigator.clipboard.writeText(valueToCopy).then(function () {\n        return handleCopyResult(true);\n      }).catch(function (err) {\n        return setError(err);\n      });\n    } else {\n      setError(new Error(\"useClipboard: navigator.clipboard is not supported\"));\n    }\n  };\n\n  var reset = function reset() {\n    setCopied(false);\n    setError(null);\n    clearTimeout(copyTimeout);\n  };\n\n  return {\n    copy: copy,\n    reset: reset,\n    error: error,\n    copied: copied\n  };\n}\n\nexport { useClipboard };","map":{"version":3,"mappings":";;;AACO,SAASA,YAAT,GAA8C;AAAA,iFAAJ,EAAI;AAAA,0BAAtBC,OAAsB;AAAA,MAAtBA,OAAsB,6BAAZ,GAAY;;AACnD,kBAA0BC,QAAQ,CAAC,IAAD,CAAlC;AAAA;AAAA,MAAOC,KAAP;AAAA,MAAcC,QAAd;;AACA,mBAA4BF,QAAQ,CAAC,KAAD,CAApC;AAAA;AAAA,MAAOG,MAAP;AAAA,MAAeC,SAAf;;AACA,mBAAsCJ,QAAQ,CAAC,IAAD,CAA9C;AAAA;AAAA,MAAOK,WAAP;AAAA,MAAoBC,cAApB;;AACA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAAW;AAClCC,gBAAY,CAACJ,WAAD,CAAZ;AACAC,kBAAc,CAACI,UAAU,CAAC;AAAA,aAAMN,SAAS,CAAC,KAAD,CAAf;AAAA,KAAD,EAAyBL,OAAzB,CAAX,CAAd;AACAK,aAAS,CAACI,KAAD,CAAT;AACD,GAJD;;AAKA,MAAMG,IAAI,GAAG,SAAPA,IAAO,CAACC,WAAD,EAAiB;AAC5B,QAAI,eAAeC,SAAnB,EAA8B;AAC5BA,eAAS,CAACC,SAAV,CAAoBC,SAApB,CAA8BH,WAA9B,EAA2CI,IAA3C,CAAgD;AAAA,eAAMT,gBAAgB,CAAC,IAAD,CAAtB;AAAA,OAAhD,EAA8EU,KAA9E,CAAoF,UAACC,GAAD;AAAA,eAAShB,QAAQ,CAACgB,GAAD,CAAjB;AAAA,OAApF;AACD,KAFD,MAEO;AACLhB,cAAQ,CAAC,IAAIiB,KAAJ,CAAU,oDAAV,CAAD,CAAR;AACD;AACF,GAND;;AAOA,MAAMC,KAAK,GAAG,SAARA,KAAQ,GAAM;AAClBhB,aAAS,CAAC,KAAD,CAAT;AACAF,YAAQ,CAAC,IAAD,CAAR;AACAO,gBAAY,CAACJ,WAAD,CAAZ;AACD,GAJD;;AAKA,SAAO;AAAEM,QAAI,EAAJA,IAAF;AAAQS,SAAK,EAALA,KAAR;AAAenB,SAAK,EAALA,KAAf;AAAsBE,UAAM,EAANA;AAAtB,GAAP;AACF","names":["useClipboard","timeout","useState","error","setError","copied","setCopied","copyTimeout","setCopyTimeout","handleCopyResult","value","clearTimeout","setTimeout","copy","valueToCopy","navigator","clipboard","writeText","then","catch","err","Error","reset"],"sources":["/Users/marceloperez/node_modules/@mantine/hooks/src/use-clipboard/use-clipboard.ts"],"sourcesContent":["import { useState } from 'react';\n\nexport function useClipboard({ timeout = 2000 } = {}) {\n  const [error, setError] = useState<Error>(null);\n  const [copied, setCopied] = useState(false);\n  const [copyTimeout, setCopyTimeout] = useState(null);\n\n  const handleCopyResult = (value: boolean) => {\n    clearTimeout(copyTimeout);\n    setCopyTimeout(setTimeout(() => setCopied(false), timeout));\n    setCopied(value);\n  };\n\n  const copy = (valueToCopy: any) => {\n    if ('clipboard' in navigator) {\n      navigator.clipboard\n        .writeText(valueToCopy)\n        .then(() => handleCopyResult(true))\n        .catch((err) => setError(err));\n    } else {\n      setError(new Error('useClipboard: navigator.clipboard is not supported'));\n    }\n  };\n\n  const reset = () => {\n    setCopied(false);\n    setError(null);\n    clearTimeout(copyTimeout);\n  };\n\n  return { copy, reset, error, copied };\n}\n"]},"metadata":{},"sourceType":"module"}