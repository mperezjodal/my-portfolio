{"ast":null,"code":"import { Children } from 'react';\n\nfunction filterChildrenByType(children, type) {\n  return Children.toArray(children).filter(function (item) {\n    return Array.isArray(type) ? type.some(function (component) {\n      return component === item.type;\n    }) : item.type === type;\n  });\n}\n\nexport { filterChildrenByType };","map":{"version":3,"mappings":";;AACO,SAASA,oBAAT,CAA8BC,QAA9B,EAAwCC,IAAxC,EAA8C;AACnD,SAAOC,QAAQ,CAACC,OAAT,CAAiBH,QAAjB,EAA2BI,MAA3B,CAAkC,UAACC,IAAD;AAAA,WAAUC,KAAK,CAACC,OAAN,CAAcN,IAAd,IAAsBA,IAAI,CAACO,IAAL,CAAU,UAACC,SAAD;AAAA,aAAeA,SAAS,KAAKJ,IAAI,CAACJ,IAAlC;AAAA,KAAV,CAAtB,GAA0EI,IAAI,CAACJ,IAAL,KAAcA,IAAlG;AAAA,GAAlC,CAAP;AACF","names":["filterChildrenByType","children","type","Children","toArray","filter","item","Array","isArray","some","component"],"sources":["/Users/marceloperez/node_modules/@mantine/core/src/utils/filter-children-by-type/filter-children-by-type.ts"],"sourcesContent":["import { Children, JSXElementConstructor, ReactNode, ReactElement } from 'react';\n\nexport function filterChildrenByType(\n  children: ReactNode,\n  type: JSXElementConstructor<any> | JSXElementConstructor<any>[]\n) {\n  return (Children.toArray(children) as ReactElement[]).filter((item) =>\n    Array.isArray(type) ? type.some((component) => component === item.type) : item.type === type\n  );\n}\n"]},"metadata":{},"sourceType":"module"}