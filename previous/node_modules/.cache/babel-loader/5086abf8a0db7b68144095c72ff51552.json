{"ast":null,"code":"import _slicedToArray from \"/Users/marceloperez/Documents/my-portfolio/my-portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nvar ColorSchemeContext = createContext(null);\n\nfunction useMantineColorScheme() {\n  var ctx = useContext(ColorSchemeContext);\n\n  if (!ctx) {\n    throw new Error(\"useMantineColorScheme hook was called outside of context, make sure your app is wrapped with ColorSchemeProvider component\");\n  }\n\n  return ctx;\n}\n\nfunction ColorSchemeProvider(_ref) {\n  var colorScheme = _ref.colorScheme,\n      toggleColorScheme = _ref.toggleColorScheme,\n      children = _ref.children;\n\n  var _useState = useState(\"init\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      key = _useState2[0],\n      setKey = _useState2[1];\n\n  useEffect(function () {\n    setKey(\"update\");\n  }, []);\n  return /* @__PURE__ */React.createElement(ColorSchemeContext.Provider, {\n    key: key,\n    value: {\n      colorScheme: colorScheme,\n      toggleColorScheme: toggleColorScheme\n    }\n  }, children);\n}\n\nColorSchemeProvider.displayName = \"@mantine/core/ColorSchemeProvider\";\nexport { ColorSchemeProvider, useMantineColorScheme };","map":{"version":3,"mappings":";;AACA,IAAMA,kBAAkB,GAAGC,aAAa,CAAC,IAAD,CAAxC;;AACO,SAASC,qBAAT,GAAiC;AACtC,MAAMC,GAAG,GAAGC,UAAU,CAACJ,kBAAD,CAAtB;;AACA,MAAI,CAACG,GAAL,EAAU;AACR,UAAM,IAAIE,KAAJ,CAAU,4HAAV,CAAN;AACD;;AACD,SAAOF,GAAP;AACD;;AACM,SAASG,mBAAT,OAIJ;AAAA,MAHDC,WAGC,QAHDA,WAGC;AAAA,MAFDC,iBAEC,QAFDA,iBAEC;AAAA,MADDC,QACC,QADDA,QACC;;AACD,kBAAsBC,QAAQ,CAAC,MAAD,CAA9B;AAAA;AAAA,MAAOC,GAAP;AAAA,MAAYC,MAAZ;;AACAC,WAAS,CAAC,YAAM;AACdD,UAAM,CAAC,QAAD,CAAN;AACD,GAFQ,EAEN,EAFM,CAAT;AAGA,wBAAuBE,KAAK,CAACC,aAAN,CAAoBf,kBAAkB,CAACgB,QAAvC,EAAiD;AACtEL,OAAG,EAAHA,GADsE;AAEtEM,SAAK,EAAE;AAAEV,iBAAW,EAAXA,WAAF;AAAeC,uBAAiB,EAAjBA;AAAf;AAF+D,GAAjD,EAGpBC,QAHoB,CAAvB;AAID;;AACDH,mBAAmB,CAACY,WAApB,GAAkC,mCAAlC","names":["ColorSchemeContext","createContext","useMantineColorScheme","ctx","useContext","Error","ColorSchemeProvider","colorScheme","toggleColorScheme","children","useState","key","setKey","useEffect","React","createElement","Provider","value","displayName"],"sources":["/Users/marceloperez/node_modules/@mantine/styles/src/theme/ColorSchemeProvider.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { ColorScheme } from './types';\n\ninterface ColorSchemeContextProps {\n  colorScheme: ColorScheme;\n  toggleColorScheme(colorScheme?: ColorScheme): void;\n}\n\nconst ColorSchemeContext = createContext<ColorSchemeContextProps>(null);\n\nexport function useMantineColorScheme() {\n  const ctx = useContext(ColorSchemeContext);\n\n  if (!ctx) {\n    throw new Error(\n      'useMantineColorScheme hook was called outside of context, make sure your app is wrapped with ColorSchemeProvider component'\n    );\n  }\n\n  return ctx;\n}\n\ninterface ColorSchemeProviderProps extends ColorSchemeContextProps {\n  children: React.ReactNode;\n}\n\nexport function ColorSchemeProvider({\n  colorScheme,\n  toggleColorScheme,\n  children,\n}: ColorSchemeProviderProps) {\n  const [key, setKey] = useState('init');\n\n  useEffect(() => {\n    setKey('update');\n  }, []);\n\n  return (\n    <ColorSchemeContext.Provider key={key} value={{ colorScheme, toggleColorScheme }}>\n      {children}\n    </ColorSchemeContext.Provider>\n  );\n}\n\nColorSchemeProvider.displayName = '@mantine/core/ColorSchemeProvider';\n"]},"metadata":{},"sourceType":"module"}